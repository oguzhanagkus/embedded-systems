
Pixelstick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005568  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003888  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f90  08008f90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08008fa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08008fa4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea5d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cf  00000000  00000000  0002ea99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00031908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ac8  00000000  00000000  000325f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e974  00000000  00000000  0004c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aaf6  00000000  00000000  0005aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000f5578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080056e8 	.word	0x080056e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080056e8 	.word	0x080056e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN8LEDStripC1EhPbP17TIM_HandleTypeDefm>:

#include <cstring>

#include "led_strip.h"

LEDStrip::LEDStrip(uint8_t led_count, bool *sent_flag, TIM_HandleTypeDef *htim, uint32_t channel)
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	460b      	mov	r3, r1
 80004de:	72fb      	strb	r3, [r7, #11]
{
	this->led_count = led_count;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80004e6:	3324      	adds	r3, #36	; 0x24
 80004e8:	7afa      	ldrb	r2, [r7, #11]
 80004ea:	701a      	strb	r2, [r3, #0]
	this->sent_flag = sent_flag;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80004f2:	332c      	adds	r3, #44	; 0x2c
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
	this->htim = htim;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80004fe:	3330      	adds	r3, #48	; 0x30
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800050a:	3334      	adds	r3, #52	; 0x34
 800050c:	69ba      	ldr	r2, [r7, #24]
 800050e:	601a      	str	r2, [r3, #0]

	set_brightness(127);
 8000510:	217f      	movs	r1, #127	; 0x7f
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f000 f8ba 	bl	800068c <_ZN8LEDStrip14set_brightnessEh>
	set_single_color(0, 0, 0);
 8000518:	2300      	movs	r3, #0
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f000 f8d2 	bl	80006c8 <_ZN8LEDStrip16set_single_colorEhhh>
	update();
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f000 f81f 	bl	8000568 <_ZN8LEDStrip6updateEv>
	HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f001 fa15 	bl	800195c <HAL_Delay>
	set_single_color(255, 255, 255);
 8000532:	23ff      	movs	r3, #255	; 0xff
 8000534:	22ff      	movs	r2, #255	; 0xff
 8000536:	21ff      	movs	r1, #255	; 0xff
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f000 f8c5 	bl	80006c8 <_ZN8LEDStrip16set_single_colorEhhh>
	update();
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f000 f812 	bl	8000568 <_ZN8LEDStrip6updateEv>
	HAL_Delay(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f001 fa08 	bl	800195c <HAL_Delay>
	set_single_color(0, 0, 0);
 800054c:	2300      	movs	r3, #0
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f000 f8b8 	bl	80006c8 <_ZN8LEDStrip16set_single_colorEhhh>
	update();
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	f000 f805 	bl	8000568 <_ZN8LEDStrip6updateEv>
}
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZN8LEDStrip6updateEv>:

void LEDStrip::update()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	83fb      	strh	r3, [r7, #30]
	uint32_t color;

	for (int i = 0; i < led_count; i++)
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800057e:	3324      	adds	r3, #36	; 0x24
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	4293      	cmp	r3, r2
 8000588:	da48      	bge.n	800061c <_ZN8LEDStrip6updateEv+0xb4>
	{
		color = ((led_data[i][GREEN] << 16) | (led_data[i][RED] << 8) | led_data[i][BLUE]);
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	440b      	add	r3, r1
 8000596:	f203 3302 	addw	r3, r3, #770	; 0x302
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	0419      	lsls	r1, r3, #16
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	4403      	add	r3, r0
 80005aa:	f203 3301 	addw	r3, r3, #769	; 0x301
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	021b      	lsls	r3, r3, #8
 80005b2:	4319      	orrs	r1, r3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4413      	add	r3, r2
 80005c0:	4403      	add	r3, r0
 80005c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	430b      	orrs	r3, r1
 80005ca:	60fb      	str	r3, [r7, #12]

		for (int j = 23; j >= 0; j--)
 80005cc:	2317      	movs	r3, #23
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db1e      	blt.n	8000614 <_ZN8LEDStrip6updateEv+0xac>
		{
			if (color & (1 << j)) pwm_data[index] = 60;
 80005d6:	2201      	movs	r2, #1
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d007      	beq.n	80005f8 <_ZN8LEDStrip6updateEv+0x90>
 80005e8:	8bfa      	ldrh	r2, [r7, #30]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80005f0:	213c      	movs	r1, #60	; 0x3c
 80005f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80005f6:	e006      	b.n	8000606 <_ZN8LEDStrip6updateEv+0x9e>
			else pwm_data[index] = 30;
 80005f8:	8bfa      	ldrh	r2, [r7, #30]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000600:	211e      	movs	r1, #30
 8000602:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			index++;
 8000606:	8bfb      	ldrh	r3, [r7, #30]
 8000608:	3301      	adds	r3, #1
 800060a:	83fb      	strh	r3, [r7, #30]
		for (int j = 23; j >= 0; j--)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3b01      	subs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e7dd      	b.n	80005d0 <_ZN8LEDStrip6updateEv+0x68>
	for (int i = 0; i < led_count; i++)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	e7ad      	b.n	8000578 <_ZN8LEDStrip6updateEv+0x10>
		}
	}

	for (int i = 0; i < 50; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	2b31      	cmp	r3, #49	; 0x31
 8000624:	dc0d      	bgt.n	8000642 <_ZN8LEDStrip6updateEv+0xda>
	{
		pwm_data[index] = 0;
 8000626:	8bfa      	ldrh	r2, [r7, #30]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800062e:	2100      	movs	r1, #0
 8000630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		index++;
 8000634:	8bfb      	ldrh	r3, [r7, #30]
 8000636:	3301      	adds	r3, #1
 8000638:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < 50; i++)
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	3301      	adds	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	e7ee      	b.n	8000620 <_ZN8LEDStrip6updateEv+0xb8>
	}

	HAL_TIM_PWM_Start_DMA(htim, channel, (uint32_t *) pwm_data, index);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000648:	3330      	adds	r3, #48	; 0x30
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000652:	3334      	adds	r3, #52	; 0x34
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
 800065c:	8bfb      	ldrh	r3, [r7, #30]
 800065e:	f003 f947 	bl	80038f0 <HAL_TIM_PWM_Start_DMA>

	while (!(*sent_flag)) {};
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000668:	332c      	adds	r3, #44	; 0x2c
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <_ZN8LEDStrip6updateEv+0x10c>
 8000672:	e7f6      	b.n	8000662 <_ZN8LEDStrip6updateEv+0xfa>

	*sent_flag = false;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800067a:	332c      	adds	r3, #44	; 0x2c
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <_ZN8LEDStrip14set_brightnessEh>:

void LEDStrip::set_brightness(uint8_t brightness)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	this->brightness = (float)brightness / 255;
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006a2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80006c4 <_ZN8LEDStrip14set_brightnessEh+0x38>
 80006a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80006b0:	3328      	adds	r3, #40	; 0x28
 80006b2:	edc3 7a00 	vstr	s15, [r3]
	update_led_data();
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f876 	bl	80007a8 <_ZN8LEDStrip15update_led_dataEv>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	437f0000 	.word	0x437f0000

080006c8 <_ZN8LEDStrip16set_single_colorEhhh>:

void LEDStrip::set_single_color(uint8_t r, uint8_t g, uint8_t b)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	4608      	mov	r0, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4603      	mov	r3, r0
 80006d8:	70fb      	strb	r3, [r7, #3]
 80006da:	460b      	mov	r3, r1
 80006dc:	70bb      	strb	r3, [r7, #2]
 80006de:	4613      	mov	r3, r2
 80006e0:	707b      	strb	r3, [r7, #1]
	for (int i = 0; i < led_count; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80006ec:	3324      	adds	r3, #36	; 0x24
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	da0d      	bge.n	8000714 <_ZN8LEDStrip16set_single_colorEhhh+0x4c>
	{
		set_single_led(i, r, g, b);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	78b8      	ldrb	r0, [r7, #2]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	787b      	ldrb	r3, [r7, #1]
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	4603      	mov	r3, r0
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f8d4 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
	for (int i = 0; i < led_count; i++)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e7e8      	b.n	80006e6 <_ZN8LEDStrip16set_single_colorEhhh+0x1e>
	}

	update_led_data();
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f847 	bl	80007a8 <_ZN8LEDStrip15update_led_dataEv>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <_ZN8LEDStrip11set_paletteEh>:

void LEDStrip::set_palette(uint8_t palette_no)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	switch (palette_no)
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	3b01      	subs	r3, #1
 8000734:	2b03      	cmp	r3, #3
 8000736:	d81b      	bhi.n	8000770 <_ZN8LEDStrip11set_paletteEh+0x4c>
 8000738:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <_ZN8LEDStrip11set_paletteEh+0x1c>)
 800073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073e:	bf00      	nop
 8000740:	08000751 	.word	0x08000751
 8000744:	08000759 	.word	0x08000759
 8000748:	08000761 	.word	0x08000761
 800074c:	08000769 	.word	0x08000769
	{
		case 1:
			set_rainbow(); break;
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f8dd 	bl	8000910 <_ZN8LEDStrip11set_rainbowEv>
 8000756:	e00b      	b.n	8000770 <_ZN8LEDStrip11set_paletteEh+0x4c>
		case 2:
			set_police(); break;
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f957 	bl	8000a0c <_ZN8LEDStrip10set_policeEv>
 800075e:	e007      	b.n	8000770 <_ZN8LEDStrip11set_paletteEh+0x4c>
		case 3:
			set_flame(); break;
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f989 	bl	8000a78 <_ZN8LEDStrip9set_flameEv>
 8000766:	e003      	b.n	8000770 <_ZN8LEDStrip11set_paletteEh+0x4c>
		case 4:
			set_rgb(); break;
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f9eb 	bl	8000b44 <_ZN8LEDStrip7set_rgbEv>
 800076e:	bf00      	nop
	}

	update_led_data();
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f819 	bl	80007a8 <_ZN8LEDStrip15update_led_dataEv>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop

08000780 <_ZN8LEDStrip9set_imageEv>:

void LEDStrip::set_image()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	example_image();
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 fa25 	bl	8000bd8 <_ZN8LEDStrip13example_imageEv>
	set_single_color(0, 0, 0);
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff97 	bl	80006c8 <_ZN8LEDStrip16set_single_colorEhhh>
	update();
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fee4 	bl	8000568 <_ZN8LEDStrip6updateEv>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZN8LEDStrip15update_led_dataEv>:

/* -------------------------------------------------- */

void LEDStrip::update_led_data()
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < led_count; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80007ba:	3324      	adds	r3, #36	; 0x24
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4293      	cmp	r3, r2
 80007c4:	da70      	bge.n	80008a8 <_ZN8LEDStrip15update_led_dataEv+0x100>
	{
		led_data[i][RED] = leds[i][RED] * brightness;
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	3301      	adds	r3, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80007e4:	3328      	adds	r3, #40	; 0x28
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f2:	edc7 7a00 	vstr	s15, [r7]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2d8      	uxtb	r0, r3
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	440b      	add	r3, r1
 8000806:	f203 3301 	addw	r3, r3, #769	; 0x301
 800080a:	4602      	mov	r2, r0
 800080c:	701a      	strb	r2, [r3, #0]
		led_data[i][GREEN] = leds[i][GREEN] * brightness;
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	440b      	add	r3, r1
 800081a:	3302      	adds	r3, #2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 800082c:	3328      	adds	r3, #40	; 0x28
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083a:	edc7 7a00 	vstr	s15, [r7]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2d8      	uxtb	r0, r3
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	440b      	add	r3, r1
 800084e:	f203 3302 	addw	r3, r3, #770	; 0x302
 8000852:	4602      	mov	r2, r0
 8000854:	701a      	strb	r2, [r3, #0]
		led_data[i][BLUE] = leds[i][BLUE] * brightness;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	440b      	add	r3, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	ee07 3a90 	vmov	s15, r3
 800086a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000874:	3328      	adds	r3, #40	; 0x28
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800087e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000882:	edc7 7a00 	vstr	s15, [r7]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	440b      	add	r3, r1
 8000898:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800089c:	4602      	mov	r2, r0
 800089e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < led_count; i++)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e785      	b.n	80007b4 <_ZN8LEDStrip15update_led_dataEv+0xc>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <_ZN8LEDStrip14set_single_ledEhhhh>:

void LEDStrip::set_single_led(uint8_t led_no, uint8_t r, uint8_t g, uint8_t b)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4603      	mov	r3, r0
 80008c4:	70fb      	strb	r3, [r7, #3]
 80008c6:	460b      	mov	r3, r1
 80008c8:	70bb      	strb	r3, [r7, #2]
 80008ca:	4613      	mov	r3, r2
 80008cc:	707b      	strb	r3, [r7, #1]
	leds[led_no][RED] = r;
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	440b      	add	r3, r1
 80008da:	3301      	adds	r3, #1
 80008dc:	78ba      	ldrb	r2, [r7, #2]
 80008de:	701a      	strb	r2, [r3, #0]
	leds[led_no][GREEN] = g;
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	3302      	adds	r3, #2
 80008ee:	787a      	ldrb	r2, [r7, #1]
 80008f0:	701a      	strb	r2, [r3, #0]
	leds[led_no][BLUE] = b;
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	440b      	add	r3, r1
 8000900:	7c3a      	ldrb	r2, [r7, #16]
 8000902:	701a      	strb	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_ZN8LEDStrip11set_rainbowEv>:

/* -------------------------------------------------- */

void LEDStrip::set_rainbow()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < led_count; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000922:	3324      	adds	r3, #36	; 0x24
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4293      	cmp	r3, r2
 800092c:	da68      	bge.n	8000a00 <_ZN8LEDStrip11set_rainbowEv+0xf0>
	{
		switch (i % 7)
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <_ZN8LEDStrip11set_rainbowEv+0xf8>)
 8000932:	fb83 1302 	smull	r1, r3, r3, r2
 8000936:	4413      	add	r3, r2
 8000938:	1099      	asrs	r1, r3, #2
 800093a:	17d3      	asrs	r3, r2, #31
 800093c:	1ac9      	subs	r1, r1, r3
 800093e:	460b      	mov	r3, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	1ad1      	subs	r1, r2, r3
 8000946:	2906      	cmp	r1, #6
 8000948:	d856      	bhi.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
 800094a:	a301      	add	r3, pc, #4	; (adr r3, 8000950 <_ZN8LEDStrip11set_rainbowEv+0x40>)
 800094c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8000950:	0800096d 	.word	0x0800096d
 8000954:	08000981 	.word	0x08000981
 8000958:	08000995 	.word	0x08000995
 800095c:	080009a9 	.word	0x080009a9
 8000960:	080009bd 	.word	0x080009bd
 8000964:	080009d1 	.word	0x080009d1
 8000968:	080009e5 	.word	0x080009e5
		{
			case (0):
				set_single_led(i, 148, 0, 211); break;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	b2d9      	uxtb	r1, r3
 8000970:	23d3      	movs	r3, #211	; 0xd3
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	2294      	movs	r2, #148	; 0x94
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff9b 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 800097e:	e03b      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (1):
				set_single_led(i, 75, 0, 130); break;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	2382      	movs	r3, #130	; 0x82
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	224b      	movs	r2, #75	; 0x4b
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff91 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000992:	e031      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (2):
				set_single_led(i, 0, 0, 255); break;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	b2d9      	uxtb	r1, r3
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2300      	movs	r3, #0
 800099e:	2200      	movs	r2, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff87 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 80009a6:	e027      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (3):
				set_single_led(i, 0, 255, 0); break;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	b2d9      	uxtb	r1, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	23ff      	movs	r3, #255	; 0xff
 80009b2:	2200      	movs	r2, #0
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff7d 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 80009ba:	e01d      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (4):
				set_single_led(i, 255, 255, 0); break;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	b2d9      	uxtb	r1, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	23ff      	movs	r3, #255	; 0xff
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff73 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 80009ce:	e013      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (5):
				set_single_led(i, 255, 127, 0); break;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	b2d9      	uxtb	r1, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	237f      	movs	r3, #127	; 0x7f
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff69 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 80009e2:	e009      	b.n	80009f8 <_ZN8LEDStrip11set_rainbowEv+0xe8>
			case (6):
				set_single_led(i, 255, 0 , 0); break;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2300      	movs	r3, #0
 80009ee:	22ff      	movs	r2, #255	; 0xff
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff5f 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 80009f6:	bf00      	nop
	for (int i = 0; i < led_count; i++)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e78d      	b.n	800091c <_ZN8LEDStrip11set_rainbowEv+0xc>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	92492493 	.word	0x92492493

08000a0c <_ZN8LEDStrip10set_policeEv>:

void LEDStrip::set_police()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < led_count; i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000a1e:	3324      	adds	r3, #36	; 0x24
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4293      	cmp	r3, r2
 8000a28:	da22      	bge.n	8000a70 <_ZN8LEDStrip10set_policeEv+0x64>
	{
		switch (i % 2)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	bfb8      	it	lt
 8000a34:	425b      	neglt	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <_ZN8LEDStrip10set_policeEv+0x34>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d00a      	beq.n	8000a54 <_ZN8LEDStrip10set_policeEv+0x48>
 8000a3e:	e013      	b.n	8000a68 <_ZN8LEDStrip10set_policeEv+0x5c>
		{
			case (0):
				set_single_led(i, 255, 0, 0); break;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	2300      	movs	r3, #0
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff31 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000a52:	e009      	b.n	8000a68 <_ZN8LEDStrip10set_policeEv+0x5c>
			case (1):
				set_single_led(i, 0, 0, 255); break;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	b2d9      	uxtb	r1, r3
 8000a58:	23ff      	movs	r3, #255	; 0xff
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff27 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000a66:	bf00      	nop
	for (int i = 0; i < led_count; i++)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e7d3      	b.n	8000a18 <_ZN8LEDStrip10set_policeEv+0xc>
		}
	}
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN8LEDStrip9set_flameEv>:

void LEDStrip::set_flame()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < led_count; i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000a8a:	3324      	adds	r3, #36	; 0x24
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4293      	cmp	r3, r2
 8000a94:	da50      	bge.n	8000b38 <_ZN8LEDStrip9set_flameEv+0xc0>
	{
		switch (i % 5)
 8000a96:	68f9      	ldr	r1, [r7, #12]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <_ZN8LEDStrip9set_flameEv+0xc8>)
 8000a9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9e:	105a      	asrs	r2, r3, #1
 8000aa0:	17cb      	asrs	r3, r1, #31
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	1aca      	subs	r2, r1, r3
 8000aac:	2a04      	cmp	r2, #4
 8000aae:	d83f      	bhi.n	8000b30 <_ZN8LEDStrip9set_flameEv+0xb8>
 8000ab0:	a301      	add	r3, pc, #4	; (adr r3, 8000ab8 <_ZN8LEDStrip9set_flameEv+0x40>)
 8000ab2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000acd 	.word	0x08000acd
 8000abc:	08000ae1 	.word	0x08000ae1
 8000ac0:	08000af5 	.word	0x08000af5
 8000ac4:	08000b09 	.word	0x08000b09
 8000ac8:	08000b1d 	.word	0x08000b1d
		{
			case (0):
				set_single_led(i, 255, 127, 0); break;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	b2d9      	uxtb	r1, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	237f      	movs	r3, #127	; 0x7f
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff feeb 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000ade:	e027      	b.n	8000b30 <_ZN8LEDStrip9set_flameEv+0xb8>
			case (1):
				set_single_led(i, 128, 63, 0); break;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2d9      	uxtb	r1, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	233f      	movs	r3, #63	; 0x3f
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fee1 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000af2:	e01d      	b.n	8000b30 <_ZN8LEDStrip9set_flameEv+0xb8>
			case (2):
				set_single_led(i, 192, 63, 0); break;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	b2d9      	uxtb	r1, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	233f      	movs	r3, #63	; 0x3f
 8000afe:	22c0      	movs	r2, #192	; 0xc0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fed7 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000b06:	e013      	b.n	8000b30 <_ZN8LEDStrip9set_flameEv+0xb8>
			case (3):
				set_single_led(i, 255, 0, 0); break;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fecd 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000b1a:	e009      	b.n	8000b30 <_ZN8LEDStrip9set_flameEv+0xb8>
			case (4):
				set_single_led(i, 255, 32, 0); break;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	b2d9      	uxtb	r1, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2320      	movs	r3, #32
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fec3 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000b2e:	bf00      	nop
	for (int i = 0; i < led_count; i++)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e7a5      	b.n	8000a84 <_ZN8LEDStrip9set_flameEv+0xc>
		}
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	66666667 	.word	0x66666667

08000b44 <_ZN8LEDStrip7set_rgbEv>:

void LEDStrip::set_rgb()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < led_count; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000b56:	3324      	adds	r3, #36	; 0x24
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	da34      	bge.n	8000bcc <_ZN8LEDStrip7set_rgbEv+0x88>
	{
		switch (i % 3)
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <_ZN8LEDStrip7set_rgbEv+0x90>)
 8000b66:	fb83 3201 	smull	r3, r2, r3, r1
 8000b6a:	17cb      	asrs	r3, r1, #31
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	0052      	lsls	r2, r2, #1
 8000b72:	441a      	add	r2, r3
 8000b74:	1a8b      	subs	r3, r1, r2
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d01a      	beq.n	8000bb0 <_ZN8LEDStrip7set_rgbEv+0x6c>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	dc22      	bgt.n	8000bc4 <_ZN8LEDStrip7set_rgbEv+0x80>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <_ZN8LEDStrip7set_rgbEv+0x44>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d00a      	beq.n	8000b9c <_ZN8LEDStrip7set_rgbEv+0x58>
 8000b86:	e01d      	b.n	8000bc4 <_ZN8LEDStrip7set_rgbEv+0x80>
		{
			case (0):
				set_single_led(i, 255, 0, 0); break;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b2d9      	uxtb	r1, r3
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2300      	movs	r3, #0
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fe8d 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000b9a:	e013      	b.n	8000bc4 <_ZN8LEDStrip7set_rgbEv+0x80>
			case (1):
				set_single_led(i, 0, 255, 0); break;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	b2d9      	uxtb	r1, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	23ff      	movs	r3, #255	; 0xff
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe83 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000bae:	e009      	b.n	8000bc4 <_ZN8LEDStrip7set_rgbEv+0x80>
			case (2):
				set_single_led(i, 0, 0, 255); break;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b2d9      	uxtb	r1, r3
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2200      	movs	r2, #0
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fe79 	bl	80008b4 <_ZN8LEDStrip14set_single_ledEhhhh>
 8000bc2:	bf00      	nop
	for (int i = 0; i < led_count; i++)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e7c1      	b.n	8000b50 <_ZN8LEDStrip7set_rgbEv+0xc>
		}
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	55555556 	.word	0x55555556

08000bd8 <_ZN8LEDStrip13example_imageEv>:

void LEDStrip::example_image()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	f5ad 5d5e 	sub.w	sp, sp, #14208	; 0x3780
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	3b1c      	subs	r3, #28
 8000be8:	6018      	str	r0, [r3, #0]
	uint8_t image_data[4740 * 3] = {43,202,246,144,203,247,141,202,247,139,200,245,138,200,247,138,200,247,135,198,249,133,196,247,131,197,247,130,196,246,129,195,245,127,193,243,127,190,241,126,189,240,128,192,240,129,193,239,125,192,237,123,190,235,121,187,239,122,185,239,122,183,240,122,181,237,119,181,232,117,181,227,115,182,227,113,181,226,111,178,230,110,177,230,110,175,229,109,175,225,106,175,217,105,174,215,106,173,218,105,171,219,105,169,217,103,167,215,103,167,215,101,165,213,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,199,77,142,198,73,139,197,72,138,196,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,145,204,248,144,203,247,141,202,247,139,200,245,138,199,246,138,200,247,138,200,249,136,198,249,132,195,246,132,195,246,132,195,246,131,195,243,132,194,243,130,192,241,129,191,240,127,191,237,124,190,238,123,189,237,120,187,239,118,185,238,121,184,238,121,182,236,120,182,233,119,181,230,117,181,227,114,181,226,112,178,228,110,177,229,109,176,228,109,175,225,107,174,219,108,172,216,106,172,220,105,171,219,105,169,217,103,167,215,103,167,215,101,165,213,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,199,77,142,198,73,139,197,72,138,196,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,141,203,244,141,203,244,141,202,246,141,202,247,140,201,248,139,200,247,138,198,248,136,196,246,136,196,246,135,195,245,132,192,242,131,192,239,130,191,238,130,191,236,129,190,235,127,189,236,126,189,242,122,189,242,116,190,239,115,189,236,116,186,235,118,184,234,120,182,233,120,180,232,119,179,231,118,178,228,114,178,226,110,178,223,107,178,224,108,176,223,111,171,223,110,170,222,108,171,222,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,197,72,138,196,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,142,205,248,141,204,247,138,201,245,137,200,244,137,198,245,137,198,245,137,198,245,136,198,247,132,194,243,133,195,244,133,195,244,132,194,241,132,194,241,132,194,241,130,192,239,127,191,239,125,190,244,122,189,242,117,189,239,115,189,236,115,188,233,117,185,232,116,182,234,118,179,233,119,179,233,117,179,230,112,179,224,110,179,221,107,178,222,108,176,223,111,170,226,110,169,225,108,171,224,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,197,72,138,196,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,140,204,250,139,203,249,139,203,249,139,203,249,137,204,249,135,202,247,133,200,245,131,199,244,130,198,243,130,198,245,129,197,244,126,194,243,124,192,241,124,191,243,124,191,243,124,191,243,124,190,242,123,189,241,124,185,239,122,185,236,119,185,233,117,185,232,114,184,235,112,182,233,115,180,236,114,179,233,109,180,226,108,179,223,106,179,220,106,177,223,107,172,228,108,170,229,106,172,224,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,199,72,138,198,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,167,195,243,166,194,242,167,193,242,167,194,241,166,194,241,165,194,238,161,192,236,159,194,236,151,189,234,149,192,237,144,192,238,138,192,239,132,190,240,128,191,242,126,192,244,124,191,243,123,188,242,124,187,240,126,183,236,125,183,233,121,185,231,117,185,232,116,184,233,113,183,234,114,181,234,113,180,233,108,180,228,107,180,225,109,177,224,109,175,225,107,172,228,106,171,227,106,172,224,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,199,72,138,198,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,197,149,199,193,143,194,191,139,188,188,136,184,190,136,185,191,139,187,193,146,192,192,150,196,195,166,212,190,174,219,181,182,228,169,186,232,157,189,236,145,192,238,134,190,239,125,187,238,126,188,245,126,187,242,127,185,233,126,185,229,121,186,228,118,185,228,120,182,231,117,180,231,115,181,231,113,181,230,108,180,230,108,178,229,113,174,231,115,171,228,110,171,225,108,171,224,106,172,222,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,199,72,138,198,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,173,74,121,174,72,119,176,73,118,180,75,118,181,76,119,180,75,118,177,74,117,173,78,120,161,76,118,155,84,128,153,96,141,153,112,156,157,134,178,169,157,203,175,176,222,174,184,233,158,177,233,149,179,233,142,180,227,133,182,223,121,184,225,117,184,227,117,181,229,116,180,228,117,181,229,113,181,228,109,179,230,110,177,230,114,173,231,115,171,228,110,172,223,108,172,220,106,172,222,105,171,221,105,168,219,103,166,217,103,166,217,101,164,215,99,162,213,98,161,212,98,161,212,96,159,210,94,157,210,93,156,209,92,155,209,91,154,208,87,152,206,85,150,204,86,149,203,85,148,202,81,146,202,80,145,201,78,143,201,77,142,200,73,139,199,72,138,198,72,138,198,71,137,197,69,135,195,67,133,193,66,132,192,65,131,191,63,129,189,61,127,187,61,125,186,59,123,184,60,124,185,56,120,181,56,120,181,52,116,177,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,204,78,116,205,79,116,207,78,116,208,78,114,207,77,113,208,77,111,209,78,112,209,79,115,206,78,113,203,77,115,198,78,116,195,78,120,188,77,119,183,76,120,183,80,125,178,91,136,192,130,177,190,158,205,178,179,225,148,179,223,122,181,223,114,187,230,114,187,230,109,180,226,111,177,225,112,178,226,114,182,231,111,179,228,110,176,226,112,176,224,111,173,220,110,174,220,105,171,221,104,170,222,105,168,221,104,167,220,102,165,216,101,164,215,99,162,213,99,162,213,97,160,211,96,159,210,94,157,210,93,156,209,91,154,207,89,152,205,86,151,205,85,150,204,85,148,202,85,148,202,82,147,203,80,145,201,77,142,200,75,140,198,72,138,196,72,138,196,71,137,197,70,136,196,69,135,195,67,133,193,65,131,191,64,130,190,63,129,189,63,129,189,61,125,186,59,123,184,59,123,184,56,120,181,57,121,182,53,117,178,55,117,178,53,115,176,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,222,84,107,222,84,107,222,83,106,221,82,105,220,80,106,219,79,105,221,78,106,221,78,106,221,76,107,222,74,108,224,74,109,225,75,112,224,72,111,222,70,109,222,70,109,217,77,116,190,78,118,167,82,123,156,105,146,166,145,188,168,173,215,150,178,218,131,173,215,122,173,218,115,173,221,111,174,225,104,170,220,107,173,223,111,177,225,112,179,224,114,178,224,106,170,218,108,171,222,105,171,223,106,169,222,104,167,220,102,165,216,100,163,214,99,162,213,98,161,212,96,159,210,95,158,209,93,156,209,92,155,208,91,154,207,90,153,206,86,151,205,85,150,204,84,147,201,83,146,200,79,144,200,77,142,198,76,141,199,75,140,198,74,140,198,75,141,199,74,140,200,71,137,197,68,134,194,66,132,192,66,132,192,65,131,191,63,129,189,61,127,187,63,127,188,60,124,185,60,124,185,56,120,181,57,121,182,53,117,178,55,117,178,52,114,175,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,231,95,95,230,94,96,228,93,97,226,91,98,224,90,101,223,88,103,219,86,107,219,85,109,220,83,111,220,81,112,221,80,112,224,80,113,226,81,114,225,77,111,225,75,110,222,77,110,214,79,111,213,88,120,202,86,121,184,78,116,180,84,122,183,112,152,179,148,189,165,172,216,134,176,226,112,172,226,112,173,228,107,168,222,105,169,217,106,170,216,105,167,216,111,174,225,112,175,228,109,175,227,110,173,226,109,172,225,107,170,223,105,168,221,104,167,218,103,166,217,101,164,217,100,163,216,100,163,216,100,163,216,99,162,215,99,162,215,96,161,215,95,160,214,98,161,215,96,159,213,92,157,211,88,153,207,83,148,204,78,143,199,72,138,196,69,135,193,72,138,196,70,136,194,68,134,194,67,133,193,67,133,193,66,132,192,64,130,188,61,127,185,61,125,186,59,123,184,59,123,184,55,119,180,56,120,181,53,117,178,55,117,178,52,114,175,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,233,101,88,232,100,88,231,98,91,229,97,93,229,96,99,226,95,103,223,92,106,222,91,109,221,89,112,220,86,111,221,84,110,222,84,110,224,84,111,225,83,109,225,81,108,225,81,106,224,82,104,220,78,100,222,78,103,228,84,111,226,81,112,205,80,114,179,92,126,158,111,147,158,147,189,148,165,211,131,163,214,117,164,216,105,167,216,100,168,215,107,171,219,97,160,211,96,162,214,96,162,214,100,163,216,101,164,217,103,166,219,104,167,220,105,168,219,106,169,220,104,167,220,103,166,219,101,164,217,99,162,215,98,161,214,97,160,213,94,159,213,94,159,213,91,154,208,91,154,208,90,155,209,90,155,209,90,155,211,89,154,210,85,151,209,83,149,207,73,139,197,72,138,196,71,137,197,68,134,194,65,131,191,63,129,189,63,129,187,63,129,187,61,125,186,58,122,183,59,123,184,55,119,180,57,121,182,53,117,178,54,116,177,52,114,175,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,234,105,86,233,103,87,233,103,89,232,101,93,232,100,98,231,98,103,228,97,105,226,94,107,225,92,109,226,90,110,224,88,108,224,88,108,224,88,108,223,88,105,223,88,105,224,89,104,225,89,103,225,89,101,226,88,101,226,88,103,227,86,105,222,84,107,215,86,108,207,91,112,190,92,115,179,113,141,170,148,187,142,163,210,107,169,218,92,170,219,93,161,210,104,168,216,97,163,213,96,162,214,96,159,212,94,157,210,91,154,207,89,152,205,87,150,203,86,149,202,86,149,202,88,151,204,91,154,207,94,157,210,95,158,211,94,157,210,89,154,208,87,152,206,92,155,208,90,153,206,85,150,204,83,148,202,83,148,202,83,148,202,82,149,204,81,148,203,86,152,210,78,144,202,70,136,194,67,133,191,67,133,191,67,133,191,62,128,186,58,124,182,62,126,187,60,124,185,60,124,185,56,120,181,57,121,182,53,117,178,54,116,177,51,113,174,51,112,175,50,111,174,50,110,173,49,109,172,48,108,171,47,107,170,46,106,169,233,106,89,233,106,89,233,106,91,233,105,94,234,102,97,233,101,99,232,99,102,231,97,104,229,95,104,228,94,105,228,93,107,228,93,107,227,92,107,226,91,105,224,92,105,223,91,104,226,92,101,225,90,97,224,87,95,227,87,98,229,89,102,231,89,103,232,86,99,228,84,94,225,85,94,206,89,105,173,99,124,161,131,167,140,159,202,118,164,213,110,166,213,98,160,209,95,158,209,93,159,211,94,157,210,93,156,209,91,154,207,90,153,206,89,152,205,88,151,204,86,149,202,83,146,199,80,143,196,78,141,194,80,143,196,84,147,200,87,152,206,91,156,210,87,150,203,86,149,202,82,147,201,81,146,200,80,145,199,80,145,199,79,146,201,78,145,200,75,141,199,80,146,204,83,149,207,79,145,203,69,135,193,62,128,186,62,128,186,64,130,188,61,125,186,58,122,183,59,123,184,55,119,180,57,121,182,53,117,178,55,117,178,52,114,175,51,112,175,50,111,174,50,110,173,49,109,172,47,107,170,47,107,170,46,106,169,234,103,93,235,104,94,235,104,94,235,104,96,236,103,96,235,102,97,235,101,98,235,101,100,232,98,99,232,97,103,232,97,104,231,95,105,231,95,107,230,94,108,229,93,107,228,92,106,225,91,102,231,93,106,238,93,108,235,88,104,229,89,102,228,91,101,230,93,101,229,92,99,229,93,97,226,93,98,217,93,103,192,91,109,177,108,137,165,140,179,129,158,202,102,160,208,96,159,212,94,159,213,94,157,210,93,156,209,91,154,207,89,152,205,87,150,203,86,149,202,83,146,199,83,146,199,83,146,199,83,146,199,81,144,197,77,140,193,71,136,190,68,133,187,80,143,196,81,144,197,79,145,197,79,145,197,78,143,197,76,141,195,73,140,195,72,139,194,74,141,196,71,138,193,70,136,194,74,140,198,78,144,202,76,142,200,69,136,191,61,127,185,63,127,188,60,124,185,59,123,184,54,118,179,55,119,180,52,116,177,55,117,178,54,116,177,51,112,175,50,111,174,50,110,173,49,109,172,47,107,170,47,107,170,46,106,169,233,97,97,234,99,96,235,102,97,236,103,98,234,103,95,234,103,95,234,103,95,235,103,98,235,103,99,235,101,100,234,100,101,233,98,104,233,98,105,233,97,107,232,98,109,230,96,107,233,99,108,230,94,104,235,90,105,238,93,106,235,95,104,229,94,101,228,93,99,229,94,98,229,93,95,232,92,93,235,91,91,229,92,99,210,93,111,182,104,130,155,131,165,136,154,194,112,150,197,101,153,201,100,153,203,96,152,201,92,152,204,90,152,203,89,150,204,88,149,203,86,147,201,85,146,200,83,144,198,80,143,196,80,142,193,78,140,191,76,138,189,75,137,188,70,132,183,71,133,184,70,133,184,71,134,187,70,133,187,71,134,188,70,135,191,71,136,192,69,134,190,69,134,190,69,134,190,69,134,190,69,135,193,71,137,195,71,140,197,74,140,198,71,135,196,68,130,191,62,126,187,56,121,179,55,119,180,52,116,177,54,116,177,54,114,176,52,112,175,51,111,174,50,110,172,49,109,171,47,107,169,47,107,170,46,106,169,227,80,90,234,89,96,238,98,101,237,102,99,234,102,97,231,104,95,232,105,96,233,106,97,233,105,96,234,102,97,234,102,98,234,101,102,232,102,104,231,102,106,229,103,106,229,103,106,231,102,106,232,101,106,234,99,105,234,99,105,233,98,102,232,97,101,233,97,101,232,96,98,232,94,94,232,94,94,235,95,96,226,90,92,227,98,103,209,93,102,192,96,108,209,150,170,208,201,235,147,172,213,126,161,203,102,145,188,92,142,191,91,147,198,89,144,200,88,143,200,90,145,202,85,141,198,82,142,196,77,139,190,80,140,190,73,134,181,75,131,180,78,132,179,73,129,176,69,127,175,65,125,175,65,125,177,66,127,182,65,126,183,64,124,184,63,124,181,64,123,179,63,124,179,63,124,179,67,130,184,69,134,190,62,131,188,59,129,188,68,137,196,72,134,195,74,134,196,72,134,193,67,132,188,64,130,188,62,127,185,62,122,184,60,118,182,59,114,179,60,115,179,59,115,176,53,112,172,48,108,168,46,106,168,46,105,171,225,68,85,231,76,90,234,87,95,235,95,96,234,100,97,233,105,96,233,106,97,232,106,94,233,105,96,233,105,96,235,103,98,235,103,99,233,103,101,232,104,103,230,105,103,230,105,103,231,103,102,231,103,102,232,102,102,232,102,102,234,102,100,234,102,100,234,100,99,234,100,99,237,103,100,231,97,94,236,102,99,230,96,93,231,97,96,235,101,100,222,88,87,198,91,97,199,142,161,240,220,247,216,216,244,197,213,246,166,200,237,148,190,232,139,181,229,128,172,221,119,159,211,119,161,211,121,165,212,121,165,210,121,168,210,136,181,223,138,179,223,136,175,218,134,176,218,126,169,212,108,152,197,85,133,181,68,120,170,66,119,173,67,124,179,69,126,181,60,120,174,63,122,178,62,123,178,56,119,173,53,118,174,62,127,185,65,131,191,60,126,186,67,129,188,67,129,188,65,130,188,62,128,186,61,127,187,61,127,187,61,125,187,63,123,186,58,116,179,59,114,178,57,113,174,54,113,173,53,113,173,52,112,174,49,110,175,225,57,80,226,63,82,229,73,86,233,84,90,237,94,96,236,101,97,236,103,96,235,104,96,236,105,97,236,105,97,237,105,100,237,105,101,237,105,103,234,104,102,234,104,102,233,103,101,233,104,99,233,104,99,233,106,99,233,106,99,233,106,99,231,107,99,231,107,99,231,107,99,231,104,97,231,104,97,234,105,99,228,99,93,227,95,90,232,99,94,229,96,91,220,95,91,198,90,90,196,111,116,247,196,203,241,219,231,220,225,244,200,220,244,195,220,250,193,217,251,203,219,253,201,215,250,195,212,242,195,212,242,196,215,247,186,206,239,197,213,249,191,207,243,195,209,244,191,207,243,191,213,252,185,214,254,146,184,223,93,138,179,63,116,160,62,120,166,64,124,178,61,123,180,59,121,180,59,121,180,59,120,177,57,118,175,58,117,175,59,120,177,53,123,174,56,127,179,59,128,185,58,126,187,55,123,188,53,121,186,51,121,183,53,122,181,55,121,179,55,120,176,57,117,177,55,115,175,53,113,176,51,112,175,49,113,177,227,53,80,227,55,79,227,61,81,229,71,85,234,83,90,237,93,93,237,99,96,236,101,95,237,104,97,237,106,98,237,105,100,237,105,100,237,105,101,237,105,101,237,105,101,237,105,101,235,106,100,235,107,98,234,107,98,232,108,96,231,109,98,230,110,96,230,109,98,230,110,96,230,109,98,231,109,96,229,105,95,232,105,96,233,105,96,231,100,92,231,98,91,234,99,93,230,95,89,216,94,89,187,93,91,208,142,143,232,191,195,252,229,239,242,226,239,233,220,237,223,212,229,222,213,232,217,214,231,210,213,230,211,218,237,205,211,235,208,212,241,208,211,242,205,208,239,207,212,242,201,212,242,195,212,242,191,216,247,182,215,248,158,198,233,131,176,215,106,154,200,69,121,169,56,112,163,64,119,173,62,117,173,62,117,173,65,120,177,57,117,171,54,122,171,49,121,171,53,119,177,55,121,182,59,124,188,60,125,189,54,122,183,50,121,177,48,117,172,50,117,172,54,116,175,55,115,177,54,114,177,52,113,176,49,113,175,232,51,86,230,51,83,227,55,81,228,61,81,230,70,82,232,81,88,236,92,92,239,100,97,236,103,98,236,104,99,235,107,98,235,107,98,237,105,100,237,105,100,239,106,101,240,107,100,238,107,97,236,108,97,235,109,97,233,110,95,231,109,96,230,110,94,228,110,96,228,111,94,229,111,97,231,111,95,232,110,97,233,109,97,233,105,94,235,104,94,236,103,94,226,91,85,229,94,91,227,95,93,219,95,93,206,93,89,197,93,90,189,98,97,221,141,142,248,184,185,255,221,223,249,220,224,237,226,232,220,220,228,214,220,232,223,229,245,211,212,232,219,219,243,210,216,242,209,216,244,206,216,241,204,216,240,201,215,242,197,214,242,194,213,243,190,213,244,190,217,246,192,223,254,156,192,228,96,138,180,63,109,158,59,110,163,59,114,168,56,116,168,57,119,170,55,118,171,55,116,171,55,116,173,55,115,175,55,115,175,55,117,174,56,118,175,59,124,180,56,121,179,52,116,178,52,113,178,53,113,176,54,114,176,55,114,172,232,50,90,230,50,87,229,51,83,226,54,80,225,60,77,227,70,81,233,82,87,238,94,94,235,100,97,234,102,97,233,105,96,233,106,97,235,107,98,237,106,96,239,106,97,240,107,98,236,108,97,236,108,95,235,109,95,233,110,95,232,110,95,230,110,94,230,110,94,228,111,94,228,108,92,234,114,98,233,111,96,231,108,93,232,106,94,233,105,94,235,104,94,235,104,96,229,96,91,229,94,91,232,94,91,228,93,89,227,94,89,221,94,87,211,94,87,197,94,87,185,102,96,205,140,134,244,199,196,250,220,220,236,216,218,228,215,222,242,232,241,225,219,231,225,227,242,221,227,243,219,226,242,215,224,241,212,220,239,207,218,240,206,218,240,205,220,241,197,214,234,196,216,240,190,214,240,190,219,251,172,207,245,112,154,196,63,107,152,60,108,156,59,109,160,58,109,162,59,112,164,58,113,167,57,112,166,56,111,167,57,112,168,57,113,170,53,112,170,55,115,177,55,116,179,55,116,179,53,114,177,53,113,175,55,114,174,228,49,91,229,50,90,227,51,89,225,52,82,222,53,76,224,59,76,228,71,82,232,83,87,233,93,92,231,98,93,231,103,94,232,105,96,233,107,95,234,106,93,237,107,94,237,107,94,236,108,97,235,109,97,235,109,95,236,110,96,234,111,96,234,111,96,234,111,96,234,111,96,235,112,97,236,113,98,232,109,94,233,110,95,242,116,104,236,110,98,227,101,89,232,106,94,232,104,93,227,99,88,230,99,91,228,96,91,225,93,89,230,101,96,219,94,88,215,92,84,219,98,89,210,96,86,190,86,77,218,128,120,255,196,189,250,201,196,242,213,209,237,222,217,239,232,226,234,233,231,232,233,238,226,233,243,220,232,244,215,231,244,211,229,243,208,227,242,209,227,247,202,220,242,202,220,242,195,216,237,191,211,235,201,222,249,191,216,247,154,182,221,114,146,193,91,129,178,67,109,157,54,100,149,51,102,149,52,104,154,50,101,156,47,97,156,55,105,166,54,108,170,53,112,172,53,113,173,50,114,175,49,113,174,49,113,175,222,49,95,223,50,95,227,52,93,225,51,88,223,50,80,221,52,75,224,61,78,228,72,83,233,87,90,231,93,91,231,99,94,232,104,95,233,105,94,233,105,92,235,105,91,235,105,91,236,108,95,235,109,95,236,110,96,236,110,96,237,111,97,237,111,97,238,112,98,238,112,97,240,114,100,232,106,91,235,112,97,235,112,97,231,108,93,233,111,96,234,112,97,229,107,92,228,105,89,232,106,92,231,100,90,229,98,90,231,98,93,228,95,90,229,98,90,228,95,86,230,92,81,234,93,83,226,90,78,219,93,81,201,95,82,245,163,149,234,177,160,222,184,163,223,193,167,227,205,181,238,219,202,247,233,220,249,240,231,243,240,233,236,237,232,230,234,233,226,231,235,222,231,238,218,228,237,213,226,235,210,222,236,203,216,233,200,215,238,202,219,247,196,218,255,191,219,255,188,220,255,185,220,255,174,213,252,158,200,242,143,183,232,134,174,225,113,154,206,90,133,184,62,110,159,46,98,148,48,101,153,53,110,165,54,113,173,214,50,100,217,51,99,220,50,95,222,50,90,225,49,85,225,50,79,223,54,77,220,57,74,227,73,83,229,83,86,232,94,92,232,99,92,232,99,90,233,101,89,235,103,90,236,104,91,234,106,93,235,107,94,236,108,95,237,110,95,237,111,96,237,111,96,238,112,97,238,113,95,236,113,97,235,112,94,233,112,95,232,112,95,233,113,96,233,113,96,229,112,94,229,109,92,230,109,92,232,105,90,233,101,89,235,98,88,236,98,88,235,98,88,232,98,89,229,97,85,230,93,83,233,95,84,232,90,80,231,93,82,221,95,80,204,94,71,237,146,119,244,168,132,229,167,120,225,170,116,223,170,116,224,172,122,229,178,133,239,194,153,252,214,178,255,229,199,255,240,215,253,242,224,245,242,233,235,239,238,226,235,244,218,230,244,215,228,244,210,227,245,201,222,243,199,221,244,199,221,244,198,220,244,193,217,245,190,215,245,189,213,247,189,215,248,188,214,247,189,218,248,187,216,246,176,209,242,134,168,206,85,124,167,53,97,146,204,52,103,208,52,100,213,51,100,218,51,95,222,50,90,225,49,85,225,50,81,223,54,77,223,62,78,226,72,82,228,82,85,231,89,87,232,93,88,232,95,85,234,96,86,234,98,86,235,103,91,235,105,91,236,106,92,236,109,94,237,110,95,237,112,94,238,113,95,237,115,94,234,113,94,235,114,93,235,116,94,233,117,94,232,116,93,230,116,92,230,115,94,231,116,95,230,110,93,230,107,91,233,103,89,234,100,88,236,100,88,236,100,88,232,100,88,230,98,86,230,98,86,227,90,80,239,98,89,230,89,79,228,92,76,225,99,77,214,96,70,230,126,91,255,163,115,250,165,108,246,164,104,244,164,101,240,166,105,235,166,107,225,164,107,216,163,109,210,168,118,212,179,134,219,195,159,228,211,185,240,227,211,249,241,230,251,244,234,241,241,233,236,238,233,229,235,233,222,227,231,215,224,231,212,221,236,208,221,238,203,221,241,200,221,242,189,210,229,195,216,237,196,214,236,191,211,236,196,217,248,192,218,255,159,190,234,194,51,105,199,52,104,205,53,104,212,52,100,219,49,94,223,48,89,224,48,86,224,51,81,221,53,78,222,59,78,224,68,81,227,76,83,231,82,84,233,88,85,235,90,87,234,91,85,234,96,86,233,99,87,235,101,89,236,104,89,234,107,90,234,109,89,234,112,91,234,114,90,233,114,92,232,116,91,231,117,91,231,117,91,230,116,90,227,116,89,228,117,90,228,116,92,227,115,95,228,111,94,229,108,91,231,105,90,232,105,90,233,103,89,230,103,88,228,101,86,230,102,89,222,94,81,228,96,84,230,98,86,224,90,79,229,97,85,217,85,73,221,94,77,219,98,71,236,122,88,254,150,111,255,167,121,252,170,112,241,167,102,238,171,100,240,178,103,232,170,97,232,172,102,228,169,101,223,168,103,220,166,104,213,162,105,218,173,118,233,195,146,237,210,167,249,229,194,255,241,218,246,240,228,231,233,230,220,231,237,212,229,239,205,224,238,209,228,243,200,218,238,205,221,246,204,218,247,196,211,244,199,217,253,193,212,252,184,52,109,188,53,109,197,54,108,205,54,105,213,53,101,217,50,94,221,48,91,223,49,86,221,50,82,221,53,79,221,58,79,222,64,79,226,70,81,230,77,82,234,81,84,234,84,85,232,87,82,234,91,83,237,96,87,237,101,89,236,103,88,235,105,89,234,107,88,233,111,90,235,114,93,232,116,91,231,115,90,231,117,90,232,118,91,231,120,92,230,119,91,228,117,90,227,117,94,227,115,93,228,111,91,230,109,90,230,107,89,231,105,90,230,104,89,228,102,87,225,102,87,226,103,88,220,94,80,231,103,92,225,92,83,228,91,85,235,96,91,231,90,83,225,89,75,223,94,73,214,94,70,208,99,66,221,124,79,244,158,101,252,171,105,246,168,94,251,174,96,240,165,82,242,168,83,244,172,87,239,167,82,238,170,85,238,173,93,225,167,93,217,169,103,208,169,110,205,171,123,214,186,147,231,212,182,244,233,211,242,239,224,232,233,227,223,229,229,219,228,237,209,217,236,211,223,249,210,223,255,201,214,248,201,214,246,172,54,112,178,56,113,186,57,113,196,57,112,203,55,107,210,52,101,214,51,98,219,50,93,220,50,89,219,50,83,218,51,79,220,54,78,220,57,76,223,62,77,227,67,79,228,71,80,229,74,78,232,80,79,234,84,83,236,88,84,237,93,85,238,97,88,239,103,91,238,106,93,236,109,92,235,110,90,233,112,91,234,115,91,233,117,92,232,118,92,232,118,92,230,119,92,228,118,91,228,117,90,228,114,88,231,112,90,232,110,89,233,108,90,232,105,88,230,105,87,223,100,84,229,106,90,224,101,85,225,97,84,229,97,85,230,93,85,231,88,82,234,91,85,231,94,86,225,93,81,227,97,83,227,102,84,217,97,73,207,94,64,217,111,71,235,138,85,252,165,96,253,174,95,248,176,91,240,173,84,240,173,84,241,176,86,239,173,86,233,171,88,228,172,97,225,171,99,227,173,101,225,171,99,216,163,93,210,161,95,224,179,124,238,203,161,253,229,205,246,236,227,228,228,238,216,224,245,210,224,250,207,221,247,214,224,249,161,56,115,167,58,116,176,58,116,186,58,115,194,57,111,201,54,106,206,52,102,213,51,98,216,51,94,218,49,88,218,50,85,218,51,81,218,51,77,218,52,74,220,54,74,220,58,73,222,60,71,224,63,71,225,65,73,226,70,74,230,74,77,233,81,80,236,88,86,236,93,87,237,99,89,237,103,91,239,109,95,237,112,94,234,113,94,232,113,91,232,116,93,233,119,95,228,118,91,227,117,90,230,116,92,232,113,91,232,111,90,232,110,89,232,107,89,231,106,88,228,105,89,229,103,88,228,102,87,224,97,82,230,98,85,231,95,83,233,92,82,231,90,81,229,92,82,227,93,82,227,93,82,227,93,82,228,96,84,225,98,81,221,99,75,213,101,63,212,111,59,245,153,88,255,175,99,246,174,90,243,176,89,242,178,88,238,177,84,240,179,90,240,179,96,239,178,95,241,177,90,243,178,88,242,175,86,236,170,83,231,165,87,224,167,100,209,163,113,218,185,152,245,226,209,246,237,232,230,228,231,225,225,233,227,227,235,152,56,117,157,57,117,164,59,116,174,59,116,182,58,112,190,56,107,198,54,105,205,53,100,210,53,98,213,50,93,216,50,90,219,51,86,218,51,81,217,50,76,217,51,75,219,52,72,218,51,69,220,52,69,221,53,70,222,54,69,224,56,71,227,61,73,230,66,73,229,70,74,234,80,80,234,86,82,236,95,88,236,102,91,235,107,94,234,111,96,235,115,99,234,119,101,228,117,98,228,117,98,231,116,97,231,114,96,233,114,94,232,111,92,230,109,88,229,108,87,231,108,90,229,102,85,231,99,84,233,100,85,230,97,80,229,96,79,236,103,86,227,94,77,231,95,79,229,93,79,229,93,79,230,94,82,229,95,83,231,97,85,230,101,82,229,103,80,227,108,76,210,99,56,228,129,74,255,171,104,255,179,103,243,179,92,240,184,91,236,182,86,240,181,89,243,182,91,241,180,89,237,176,85,241,177,89,243,181,94,242,177,95,233,170,91,232,173,97,221,164,95,213,163,102,218,176,126,244,212,174,251,230,203,246,233,217,142,58,118,147,59,119,155,60,118,163,60,116,173,58,115,181,56,112,190,56,109,197,54,107,204,53,104,207,51,98,210,50,94,213,51,92,215,51,88,215,50,84,217,49,82,218,51,79,221,53,79,221,51,77,223,51,75,223,51,73,224,51,71,224,51,70,224,52,68,222,54,67,219,55,64,218,59,64,220,67,70,228,80,80,235,93,89,240,103,97,239,106,99,234,107,98,231,115,102,229,116,100,231,116,98,232,115,97,233,114,94,232,113,91,230,111,89,229,110,88,228,107,86,231,106,86,235,106,87,231,100,82,233,100,83,232,101,81,224,95,74,229,98,78,230,95,76,230,95,76,231,95,79,231,95,81,230,94,80,230,94,80,231,95,81,230,97,80,228,97,77,233,109,81,222,108,71,215,113,64,234,144,84,254,174,105,255,183,107,252,185,104,252,184,99,249,183,96,247,183,95,246,185,96,242,182,94,235,178,89,238,178,90,244,183,94,243,178,88,240,175,85,236,170,84,230,168,91,218,164,100,209,166,113,227,194,153,133,59,118,138,60,118,145,60,119,155,59,120,165,57,117,174,56,116,182,54,115,188,53,111,194,52,108,199,52,106,203,52,103,206,53,100,209,52,97,212,51,95,213,50,93,216,51,91,216,52,86,217,52,82,219,52,80,221,51,78,224,52,78,225,51,74,225,52,72,224,53,71,223,52,68,223,55,68,222,56,68,220,56,65,216,55,61,222,63,68,235,79,82,242,97,94,238,111,102,228,112,97,231,114,97,234,114,97,233,114,94,233,114,92,231,115,90,227,112,85,226,111,84,228,110,84,229,109,85,232,107,87,232,105,86,232,102,86,231,99,84,229,96,81,228,95,78,228,95,76,228,95,76,228,95,78,230,94,78,231,96,77,232,97,78,233,98,79,231,99,78,231,101,77,231,106,78,230,109,78,222,108,72,219,110,71,227,121,79,234,137,86,244,156,93,250,172,100,255,189,113,247,182,100,242,185,96,243,190,98,241,188,94,238,184,88,241,183,86,240,180,84,241,176,86,240,174,88,235,168,89,229,163,89,222,159,90,126,61,119,130,61,118,140,60,121,149,59,121,159,57,120,168,55,119,177,54,117,181,53,114,187,53,112,192,53,110,196,53,107,200,53,105,204,52,103,208,51,102,211,50,100,213,51,98,213,52,93,214,52,89,217,52,86,220,52,85,222,52,81,224,51,79,224,52,76,225,51,74,226,52,75,226,53,73,225,54,73,225,54,72,224,53,69,223,53,66,223,53,64,219,58,64,215,71,70,234,101,94,244,113,103,237,109,96,235,112,96,236,115,96,232,113,91,230,114,89,231,116,89,228,113,86,227,107,83,227,105,82,229,104,84,231,104,87,232,100,87,231,97,85,229,96,79,229,96,79,229,96,79,230,95,76,231,95,79,231,96,77,233,96,78,232,97,77,236,101,81,232,100,79,232,102,80,233,104,82,231,105,82,229,105,79,229,108,81,229,115,81,217,114,69,214,121,64,220,136,72,255,186,114,248,185,105,242,188,98,243,192,100,242,192,97,237,184,88,237,181,86,241,177,87,242,175,86,244,170,85,240,164,80,237,160,78,121,60,119,125,60,118,135,59,121,144,58,121,152,56,119,161,55,119,169,53,116,176,52,115,181,53,114,186,52,111,190,53,109,195,54,107,199,52,106,203,52,105,206,52,104,208,52,100,212,52,98,215,52,95,217,52,92,218,52,90,222,52,88,223,52,86,225,51,84,225,52,82,226,53,81,224,52,78,224,52,78,226,54,78,229,55,80,228,54,77,225,52,72,222,51,69,223,55,68,215,54,62,220,67,70,237,93,92,242,109,100,236,110,96,230,110,93,230,113,93,224,105,83,232,112,88,237,112,90,233,107,85,231,102,81,233,104,85,234,105,86,232,100,85,231,98,83,232,96,82,232,96,82,232,95,79,232,94,81,232,95,79,231,95,79,232,97,78,232,99,80,230,99,79,227,101,78,229,105,81,230,109,82,229,109,82,226,108,80,225,107,77,229,115,79,226,117,76,219,121,72,215,131,71,255,187,117,250,191,113,237,185,101,237,187,100,239,188,99,240,186,96,241,181,93,242,176,90,242,170,86,240,163,81,238,160,78,118,60,118,121,60,119,129,59,121,138,58,121,147,55,118,155,55,119,163,52,118,168,52,115,175,52,115,178,52,113,185,53,111,188,53,111,194,52,108,197,52,107,200,53,108,204,53,106,209,52,103,213,53,101,214,52,99,216,53,96,219,52,95,222,53,94,223,53,92,224,52,90,226,55,91,225,54,88,224,53,87,223,52,84,225,51,84,226,53,83,227,54,82,229,55,82,229,51,75,226,48,70,221,53,70,217,57,69,218,69,73,232,93,90,242,109,102,236,108,95,239,113,98,233,108,90,231,104,85,236,107,88,237,108,87,233,102,82,231,100,80,233,102,84,232,99,84,233,97,85,234,96,83,233,95,82,232,94,81,232,94,81,232,95,79,231,95,79,228,95,76,228,97,77,229,100,78,228,102,79,229,105,81,229,108,81,230,110,83,230,109,80,232,108,80,231,110,79,224,115,76,218,122,74,217,132,75,255,182,117,255,193,121,253,191,116,249,187,110,248,185,106,248,181,103,248,177,99,248,170,95,245,166,89,245,163,87,114,60,118,118,60,119,125,59,121,132,58,121,141,56,121,149,54,120,156,54,120,162,53,118,168,53,118,172,53,117,177,53,115,182,54,115,187,53,114,191,53,113,193,54,113,197,53,112,203,54,110,206,53,107,210,53,106,212,54,105,216,54,104,217,54,101,219,53,99,220,53,97,220,53,97,221,54,97,224,55,98,223,54,95,222,52,91,222,50,88,223,51,89,226,52,89,230,52,86,232,53,83,229,50,80,224,50,77,223,51,73,218,53,69,223,68,76,238,92,93,242,105,99,239,108,98,235,108,93,230,105,87,229,102,83,233,104,83,234,101,82,233,100,81,232,99,84,232,99,84,233,97,83,232,96,82,232,95,79,232,95,79,231,94,78,231,94,78,230,93,75,232,95,77,232,97,78,229,97,76,229,99,77,231,101,79,233,104,82,234,106,81,233,103,79,236,111,83,231,112,80,224,115,76,225,122,77,220,126,74,239,150,94,242,158,98,240,156,96,239,155,93,240,154,93,239,154,90,241,153,90,240,155,90,241,156,91,110,61,117,114,60,118,120,60,120,127,58,121,135,56,121,142,56,121,149,54,120,155,54,120,160,54,120,164,53,119,170,54,119,174,54,118,179,53,117,183,53,117,186,53,116,188,52,114,196,54,114,198,53,112,203,54,112,206,54,111,209,55,109,212,55,108,213,55,106,215,54,104,215,53,103,216,54,103,217,53,103,218,55,102,222,55,101,222,55,101,224,54,99,224,53,97,224,49,90,226,50,89,228,49,88,229,51,87,228,50,82,222,50,76,218,50,73,216,55,70,220,69,76,233,89,89,241,104,98,237,105,93,233,101,88,234,102,87,234,103,85,232,99,80,231,98,81,231,98,81,232,96,80,232,96,80,232,95,79,231,94,78,233,93,78,232,92,77,233,93,76,234,94,77,234,94,77,234,94,77,233,96,78,234,97,79,234,99,80,234,99,79,239,104,82,230,100,74,228,103,73,231,111,77,229,113,76,224,113,70,225,118,74,225,120,75,226,121,76,227,122,77,228,123,76,227,125,77,229,129,79,230,133,82,231,136,82,108,60,118,110,60,119,115,59,120,122,58,119,128,56,120,136,55,121,144,55,123,149,54,122,154,53,121,158,53,120,164,53,121,168,53,120,172,53,119,175,52,117,177,52,118,181,52,117,186,53,118,189,53,117,193,53,114,197,55,115,201,56,113,203,56,111,207,56,111,208,55,111,211,57,111,211,57,111,212,55,110,211,54,107,214,53,105,215,54,106,216,54,104,215,51,101,222,55,101,220,50,95,222,53,96,223,54,95,218,49,88,222,54,89,226,57,90,220,52,78,220,54,76,217,54,71,225,68,77,238,88,90,243,100,96,234,97,87,227,97,83,230,100,84,230,97,80,232,97,78,233,96,78,232,95,77,233,93,76,233,93,76,233,92,75,233,92,75,234,92,78,234,92,78,234,92,78,235,93,79,236,94,80,237,95,81,236,94,80,236,96,79,238,102,80,232,98,73,236,107,78,232,104,75,226,101,69,238,115,81,233,110,76,230,110,76,231,111,77,233,113,79,233,113,79,233,114,80,232,118,81,233,121,83,233,124,83,105,60,117,107,59,117,113,59,119,118,58,120,123,57,119,131,56,121,136,55,122,141,54,122,147,55,122,151,54,121,157,54,123,160,53,121,164,53,121,167,52,121,171,52,120,173,52,119,178,53,119,182,53,118,185,55,119,190,56,117,192,57,116,196,57,116,199,57,115,200,56,115,203,55,113,206,58,116,208,59,117,209,57,114,209,56,113,210,55,112,212,54,112,213,54,108,212,51,103,216,56,104,215,55,103,215,53,100,218,55,100,218,53,96,219,50,91,223,53,90,224,53,87,224,54,81,219,53,75,215,54,70,219,68,75,230,86,86,233,95,92,229,95,86,232,94,81,234,94,79,234,94,79,235,93,79,234,92,78,234,92,78,233,91,77,234,91,77,234,91,77,234,91,77,235,92,78,235,93,79,234,92,80,233,91,79,234,92,80,236,96,81,232,95,76,238,103,81,230,98,75,231,99,74,238,106,81,232,101,73,233,101,76,235,103,78,234,102,79,236,104,81,236,104,81,235,105,79,234,109,81,236,113,82,236,115,84,102,59,115,104,59,116,108,58,117,113,57,118,118,56,119,124,55,118,130,55,120,135,54,121,141,54,122,145,54,123,150,53,124,154,53,123,157,52,121,159,52,122,163,52,121,167,52,121,171,54,122,175,54,121,178,55,120,182,56,119,185,57,118,189,57,117,192,58,117,194,59,118,197,57,118,197,58,117,199,57,117,200,56,115,204,56,116,205,56,114,205,56,114,207,55,112,206,57,112,208,57,110,209,56,110,212,55,108,215,54,106,217,53,104,219,53,103,220,53,99,220,53,96,219,53,91,218,54,88,217,57,83,216,57,79,214,57,74,219,64,78,225,74,81,233,83,82,233,86,79,234,87,80,235,88,81,236,89,82,236,89,82,236,89,81,234,90,81,233,89,80,233,91,79,233,91,79,232,92,79,232,92,79,233,93,80,232,95,79,231,95,79,230,97,80,230,97,78,231,98,79,232,100,79,234,99,79,234,97,78,233,96,77,235,96,77,234,94,77,235,95,78,236,97,78,235,98,79,234,102,79,235,105,79,235,107,78,99,58,114,102,59,115,104,59,116,108,58,117,113,57,118,118,56,119,125,56,121,128,56,120,134,55,121,138,55,123,144,54,124,147,54,124,150,53,124,153,53,123,156,53,124,159,54,123,164,55,123,168,55,121,170,55,120,175,56,120,177,57,119,181,57,119,184,58,119,187,59,120,190,57,120,190,57,120,193,57,119,195,57,119,196,56,117,198,55,117,199,55,117,199,55,116,198,56,114,199,56,112,200,55,112,204,55,111,207,54,111,210,52,110,213,51,108,213,52,104,215,53,103,214,52,99,215,54,96,216,56,94,216,55,89,217,53,87,219,56,85,223,61,84,222,66,80,224,70,78,228,74,82,233,79,87,235,82,87,233,83,85,231,81,82,229,81,81,232,84,82,230,85,80,231,87,79,231,89,79,232,90,80,233,91,79,233,93,80,234,94,81,232,96,84,232,96,82,233,95,82,233,95,82,234,94,79,234,92,78,234,91,77,235,89,76,234,87,77,234,87,77,235,88,78,234,91,77,234,94,77,234,97,78,234,99,77,97,58,113,98,59,114,100,59,115,104,59,116,108,58,117,112,58,118,117,57,119,121,56,120,127,56,122,131,56,123,136,55,124,140,55,123,141,54,123,145,54,123,147,54,124,151,54,123,155,54,122,159,54,121,161,55,121,166,55,121,170,55,120,173,57,120,176,58,119,178,58,119,182,58,120,182,58,120,185,56,120,186,56,120,188,55,120,190,56,119,191,55,119,191,55,117,194,56,118,194,56,116,195,55,116,197,54,116,200,54,117,202,54,116,203,53,114,205,53,112,208,55,112,209,55,109,212,54,105,215,54,104,216,54,101,216,53,98,218,53,96,217,52,92,215,54,87,216,57,85,219,61,86,222,64,87,225,68,89,226,71,89,227,72,88,228,74,86,229,75,85,230,77,82,231,78,80,232,80,79,233,81,78,235,83,78,236,84,79,236,87,80,234,90,82,233,90,82,234,90,82,235,88,80,235,86,79,235,84,77,235,82,77,234,81,76,232,78,76,232,78,76,232,80,77,231,82,76,231,84,76,231,87,76,231,89,77,93,58,114,94,59,113,97,59,116,98,59,114,102,58,117,104,59,118,110,58,120,114,58,121,119,57,122,123,57,121,128,55,124,131,56,123,134,54,123,136,55,122,138,55,125,142,55,124,147,54,124,151,54,121,154,55,122,156,56,120,161,57,120,163,57,119,168,58,119,169,59,120,171,58,120,172,58,120,174,58,121,176,57,121,177,57,121,179,56,121,180,56,119,182,56,120,185,56,121,186,56,120,188,55,121,189,56,121,190,55,121,192,56,120,195,54,120,197,54,118,200,54,117,203,55,115,206,54,113,206,53,110,208,53,110,212,55,110,213,54,108,211,53,104,214,56,104,213,56,99,212,56,96,212,56,95,214,58,95,218,60,93,221,64,93,223,67,91,223,65,88,224,67,84,225,69,83,227,70,81,230,70,78,232,73,78,234,75,80,235,76,80,234,80,82,234,80,80,234,80,80,234,78,79,233,77,78,234,76,77,232,73,77,232,73,77,230,71,76,231,72,77,229,73,77,229,73,76,230,74,77,231,77,77,232,78,78,89,58,115,90,60,114,91,60,117,93,60,115,95,60,118,99,59,119,103,59,120,107,59,121,110,58,122,114,58,121,119,57,124,123,56,123,126,55,123,128,56,122,129,56,125,133,56,124,137,56,123,141,56,123,143,56,124,147,57,121,149,57,120,153,59,121,157,59,120,158,60,121,160,60,124,161,59,124,163,58,124,164,58,124,166,57,122,168,57,123,170,57,121,171,56,121,172,56,121,175,56,122,175,56,124,177,56,123,179,56,123,181,56,122,184,55,122,188,55,121,190,54,120,194,55,120,197,54,118,197,53,115,199,53,116,202,56,118,202,56,118,201,56,115,206,57,115,208,56,113,208,57,112,208,57,108,210,58,107,211,58,104,213,58,100,214,58,97,218,59,97,219,60,92,221,60,91,224,61,88,225,61,85,228,62,84,231,64,84,231,64,82,233,67,81,233,67,79,234,68,80,233,69,78,232,68,77,230,69,77,228,68,78,228,68,78,227,67,79,227,67,79,228,66,79,230,65,79,232,66,80,233,65,78,236,66,79,86,59,114,87,60,115,87,60,115,88,61,116,90,61,117,93,60,117,98,60,121,100,60,120,104,58,120,108,58,121,112,57,122,116,57,123,118,56,123,121,56,122,122,57,123,124,57,124,128,57,125,132,57,124,134,58,123,137,58,123,140,58,122,143,59,119,145,59,120,146,60,121,148,59,123,148,59,123,150,60,124,151,59,124,153,58,122,155,59,123,157,58,122,159,57,122,161,56,123,163,56,124,163,56,124,166,57,125,168,57,125,171,57,126,173,56,124,176,55,124,180,55,123,183,56,125,187,56,124,189,56,122,190,55,122,192,57,123,192,57,123,193,57,121,196,55,121,199,56,120,200,57,119,201,57,118,203,58,117,205,58,113,206,58,110,207,56,107,210,58,105,213,58,102,214,58,98,218,57,98,219,57,94,221,57,92,223,58,92,224,59,89,227,59,85,228,60,83,228,60,83,228,61,81,228,62,82,228,63,80,226,63,82,226,63,82,225,62,81,227,61,81,228,61,81,229,60,79,231,60,79,232,59,78,235,59,79,82,59,115,83,60,116,83,60,116,84,61,117,85,60,117,88,60,118,91,60,120,94,60,120,98,58,120,102,58,121,107,58,123,109,57,121,111,56,121,113,57,122,116,57,123,118,57,124,119,58,125,120,58,125,124,59,125,125,59,121,129,59,121,131,60,120,134,60,121,135,61,120,136,60,122,136,60,122,138,60,122,139,59,122,141,59,123,143,58,123,144,58,121,147,58,122,149,57,124,152,57,125,153,56,125,154,57,126,157,58,125,159,58,126,163,58,125,164,57,125,168,57,125,171,57,126,174,57,125,178,57,126,181,57,127,183,58,126,184,57,126,186,57,124,189,58,126,190,57,123,190,57,123,191,56,122,192,58,121,194,59,118,197,59,118,199,60,117,200,59,112,203,59,112,205,59,108,208,58,106,209,57,104,211,58,104,214,58,105,214,59,101,217,58,96,218,58,92,220,59,92,222,59,90,223,58,88,225,58,86,227,59,85,228,58,84,228,58,84,230,58,84,229,57,81,229,57,79,229,58,77,229,58,76,230,57,76,78,59,114,78,61,115,79,60,115,80,61,116,80,61,117,82,61,118,86,61,119,89,61,120,91,60,119,95,59,120,99,59,121,103,59,122,104,58,122,107,59,121,109,59,122,110,60,123,110,59,125,112,60,124,115,60,125,117,61,124,119,61,122,121,61,121,122,63,121,123,62,121,123,62,122,125,61,122,127,61,123,127,61,123,129,60,123,131,61,124,132,60,123,134,60,123,138,57,123,139,57,123,142,57,125,143,58,125,147,58,126,149,58,125,151,59,126,153,58,126,159,60,127,159,58,126,162,57,124,167,58,126,171,57,127,173,57,128,175,58,128,178,58,129,180,59,128,181,60,129,183,60,127,184,61,128,186,61,127,187,61,125,188,59,123,188,60,121,193,61,121,194,60,119,195,60,118,199,60,117,201,59,115,202,59,113,204,59,114,205,61,112,208,61,106,210,60,105,212,59,103,215,58,101,218,57,98,219,57,96,222,56,92,224,56,91,227,58,91,227,56,88,227,57,86,226,56,82,226,57,80,226,57,78,228,57,76,72,59,112,71,61,113,75,62,115,75,62,115,77,63,116,79,62,116,81,64,119,84,63,120,85,61,119,89,61,120,91,61,121,92,61,121,95,61,122,97,61,122,100,62,123,100,62,123,103,63,123,103,63,123,104,63,123,104,63,123,107,63,122,108,63,122,108,63,122,111,63,123,112,62,121,112,62,121,114,63,122,116,62,122,116,62,122,117,61,122,117,61,122,120,60,122,125,59,123,128,58,121,130,58,124,131,59,123,134,58,123,137,58,124,140,57,125,142,57,124,147,58,126,148,57,126,152,57,125,154,57,126,159,58,128,161,58,129,164,58,130,165,58,128,169,60,128,170,59,128,173,59,129,174,60,130,175,60,129,176,61,130,178,61,129,178,62,127,182,62,126,184,61,124,185,61,124,189,60,124,190,60,124,191,61,123,193,60,123,194,60,119,198,61,115,202,61,114,203,60,113,206,59,111,208,60,110,210,60,108,212,59,105,215,58,101,218,57,98,219,57,96,222,58,93,223,58,90,225,58,88,225,56,85,226,56,83,67,60,111,68,61,112,69,62,113,70,63,114,71,63,114,73,63,115,74,64,117,77,64,118,80,63,118,82,63,119,83,62,119,86,62,120,88,63,121,89,64,122,91,63,121,93,64,122,94,65,123,95,64,121,96,65,122,98,65,122,98,65,122,100,65,123,100,65,123,102,64,123,104,64,124,104,65,122,105,64,122,105,64,122,108,64,123,108,64,123,108,64,123,111,63,123,115,61,123,117,61,122,119,60,124,121,61,123,122,60,123,125,60,124,129,60,125,131,59,123,135,60,125,138,59,125,140,59,126,142,60,126,146,59,127,149,60,128,150,61,129,152,59,129,156,61,129,157,60,127,160,60,130,161,62,129,163,62,132,163,62,130,165,62,131,167,62,129,169,63,129,171,62,127,172,61,127,175,62,126,177,62,127,178,62,125,180,61,125,182,62,124,186,61,119,189,61,118,190,61,118,192,60,117,194,61,116,197,60,112,201,61,110,203,59,108,207,60,105,210,59,102,211,59,98,214,58,95,217,57,93,218,57,90,219,56,87,60,61,109,61,62,110,62,63,111,65,63,112,65,63,113,67,63,114,70,63,115,73,64,117,73,64,117,74,64,117,78,63,118,81,64,119,82,65,120,84,65,121,85,64,121,85,64,120,89,64,121,89,64,121,90,65,122,92,64,122,93,65,123,94,65,123,94,65,123,95,64,121,96,65,122,98,65,122,99,64,122,99,64,122,102,64,123,102,64,123,102,64,123,103,63,123,103,63,123,104,63,121,106,62,123,107,63,122,109,64,123,112,62,123,114,62,124,117,61,122,120,62,123,123,61,124,125,60,124,127,61,123,130,61,124,132,62,125,134,62,126,136,62,125,142,61,127,143,61,125,146,61,128,147,62,127,147,62,129,148,63,128,149,63,128,151,62,126,153,63,127,155,63,126,157,62,126,159,63,126,161,62,126,162,64,125,163,63,125,165,64,122,171,63,121,174,62,118,176,63,119,178,63,118,180,63,116,184,63,116,187,63,113,190,62,111,193,61,108,196,61,104,200,61,102,201,61,98,204,60,96,205,59,95,206,58,92,53,60,106,54,61,107,56,63,109,57,64,110,59,63,111,60,64,112,63,65,114,65,65,115,68,66,116,69,65,116,72,65,117,74,65,118,75,66,119,77,67,120,77,67,120,79,66,120,83,66,121,84,65,120,84,65,120,85,66,121,86,65,121,87,66,122,87,66,122,89,66,122,89,66,122,90,65,120,91,66,123,93,66,121,93,65,123,93,66,121,94,65,123,94,65,121,94,65,123,93,66,121,94,65,123,96,65,122,98,65,122,100,65,123,103,65,124,105,64,122,108,64,123,109,64,123,112,64,124,113,63,122,115,64,123,118,64,124,119,63,124,122,64,123,127,63,124,128,62,124,131,62,125,131,62,125,132,63,126,132,63,126,134,64,126,135,63,126,138,64,125,139,63,125,141,63,123,143,63,124,144,64,123,146,65,124,146,65,124,149,64,123,154,65,121,158,65,122,159,64,120,162,65,119,165,64,120,168,65,118,171,64,116,175,65,114,177,63,112,180,63,108,183,62,107,187,62,104,190,61,102,191,61,99,191,59,98,47,60,104,49,62,106,50,63,108,51,64,109,52,65,110,53,66,111,55,65,114,58,66,115,61,67,117,61,67,117,64,67,118,66,68,119,67,69,120,69,69,121,69,69,121,72,69,122,75,68,122,76,67,120,76,67,120,77,68,121,78,68,121,79,69,122,79,69,122,81,68,122,81,68,122,82,68,121,83,68,123,85,68,122,85,68,123,85,68,122,86,67,123,85,68,122,84,67,122,84,67,121,86,67,123,86,67,122,88,67,123,90,67,123,92,67,124,95,66,122,97,66,123,99,66,123,100,65,123,103,65,122,103,65,122,105,66,123,105,66,123,108,64,123,112,64,124,114,64,123,115,64,123,116,65,124,116,65,124,116,65,124,119,65,125,120,64,125,122,64,123,124,64,124,124,65,123,126,65,124,126,65,124,129,66,123,130,67,124,133,65,122,136,65,123,138,65,121,140,65,122,143,66,122,146,65,123,149,64,119,153,64,118,157,64,117,161,64,117,163,63,113,167,63,112,169,63,109,173,63,108,174,63,106,174,61,105,41,60,102,41,63,104,44,63,106,43,64,107,46,65,108,47,66,109,49,67,113,51,68,114,55,69,116,55,69,116,57,69,117,58,70,118,60,70,119,60,70,119,63,71,120,64,70,120,68,70,121,69,69,121,69,69,121,69,69,119,70,70,122,72,70,120,73,70,123,73,71,121,73,70,123,74,70,121,74,69,123,74,70,121,74,69,123,76,69,121,76,69,123,76,69,121,76,69,123,76,69,121,77,68,123,78,69,122,79,68,124,82,69,123,83,68,123,86,69,124,87,68,124,88,67,123,90,67,123,90,67,123,92,67,124,92,67,124,94,66,124,95,66,122,97,66,123,99,66,123,101,66,124,101,66,124,102,67,125,102,67,125,104,66,125,104,66,125,105,66,123,106,65,123,109,66,122,109,66,122,110,67,123,111,66,123,112,67,122,114,67,122,117,66,123,119,66,122,121,66,124,124,66,124,127,66,123,130,65,121,134,65,120,135,65,119,140,66,119,144,66,118,147,64,116,151,64,115,152,64,112,153,64,110,155,63,110,36,61,102,35,63,103,39,64,105,38,66,106,41,65,109,42,66,110,43,67,113,46,68,115,47,69,116,47,69,116,49,70,117,50,71,118,53,71,119,53,71,119,54,72,120,55,71,120,59,71,121,60,70,121,60,70,121,61,71,120,61,71,122,63,71,120,64,71,123,64,72,121,64,71,123,65,71,121,65,71,123,65,71,121,65,71,123,67,70,121,67,70,123,67,70,121,68,69,123,69,69,121,70,70,124,70,70,122,72,69,124,74,69,123,74,69,123,77,70,124,78,69,124,79,69,122,79,69,122,81,68,122,82,67,122,82,67,122,85,68,123,85,68,123,85,68,123,85,68,122,87,68,123,87,68,123,87,68,124,87,68,124,88,67,124,88,67,124,90,67,123,90,67,123,92,67,124,92,67,124,92,67,122,95,68,123,95,68,123,96,67,123,98,67,124,101,68,123,102,67,125,105,67,124,108,67,125,111,68,124,114,67,122,115,66,121,119,66,120,123,66,119,124,66,117,128,66,117,130,66,116,132,66,114,133,65,114,32,61,101,31,63,102,35,64,104,34,66,105,37,66,108,38,67,109,39,68,112,41,70,114,41,70,114,42,71,115,43,70,115,44,71,116,47,71,117,48,72,118,48,72,118,50,72,119,51,72,119,54,72,120,54,72,120,54,72,120,55,73,121,55,73,121,56,72,121,56,72,121,56,72,121,56,72,121,57,73,122,57,73,122,59,73,122,59,73,122,59,73,122,60,72,122,61,71,122,61,71,122,61,71,124,62,72,123,64,71,125,65,72,124,66,72,124,66,72,124,68,71,124,69,71,122,70,70,124,70,70,122,70,70,124,73,70,123,73,70,125,73,70,123,73,70,123,71,71,123,74,71,124,74,71,124,74,71,124,74,71,124,75,70,126,75,70,124,77,70,124,77,70,124,78,69,124,78,69,124,79,70,123,79,70,123,80,70,123,80,70,123,82,69,123,83,68,123,84,69,124,87,70,125,88,69,124,90,69,125,94,69,124,96,69,124,99,69,123,101,68,121,103,69,120,106,69,120,107,69,118,109,70,117,111,69,117,29,61,100,29,63,101,31,63,102,31,65,103,33,65,106,34,67,108,36,69,112,37,70,113,38,71,114,38,71,114,40,71,117,41,72,118,42,73,117,42,73,117,42,73,117,44,73,117,46,73,120,48,72,120,49,73,121,49,73,121,49,73,121,49,73,121,49,73,121,49,73,121,51,73,122,51,73,122,51,73,122,51,73,122,51,73,122,51,73,122,51,73,122,51,73,122,52,72,122,52,72,122,53,73,124,53,73,123,55,72,124,56,74,124,56,74,124,56,74,124,57,73,124,57,73,122,59,72,124,59,73,122,58,71,123,59,71,121,59,71,123,59,71,121,60,74,123,60,74,123,60,74,123,60,74,123,61,73,123,61,73,123,61,73,125,61,73,123,63,73,124,63,73,124,63,73,124,63,73,124,65,72,124,65,72,124,65,73,122,66,72,122,66,72,122,68,71,122,68,71,122,68,71,122,70,72,123,71,71,123,73,71,121,74,70,121,78,71,122,79,71,120,81,71,121,83,71,119,84,72,120,85,72,118,85,72,118,27,61,99,28,62,100,29,63,101,30,64,102,31,64,105,33,66,107,34,69,111,35,70,112,36,71,113,37,72,114,38,72,117,39,72,117,40,73,116,40,73,116,40,73,116,40,73,116,42,73,119,42,73,119,43,74,120,43,74,120,43,74,120,43,74,120,43,74,120,43,74,120,45,73,120,45,73,120,45,73,120,46,74,121,46,74,121,46,74,121,46,74,121,46,74,121,47,75,123,47,75,123,47,75,123,47,75,123,47,75,123,49,75,124,49,76,123,49,76,123,49,76,123,51,75,123,51,75,123,51,75,123,51,75,123,50,74,122,51,73,122,51,73,122,51,75,123,51,75,121,51,75,123,51,75,123,52,74,123,52,74,123,52,74,123,52,74,123,53,73,123,53,73,123,53,73,123,53,73,123,55,73,123,55,73,123,55,73,123,55,73,121,55,73,121,56,74,122,56,74,122,57,73,122,57,73,122,60,74,123,61,73,123,61,73,121,62,72,121,64,72,119,65,73,120,66,73,119,66,73,119,67,74,120,69,73,118,27,59,98,28,60,99,28,62,100,29,63,101,29,64,104,31,66,106,33,68,110,34,69,111,33,70,114,34,71,115,35,72,116,38,72,117,38,72,117,39,73,118,39,73,118,39,73,118,40,73,118,40,73,118,41,74,119,41,74,119,41,74,119,41,74,119,41,73,120,41,73,120,41,73,120,41,73,120,43,74,121,43,74,121,43,74,121,43,74,121,43,74,121,42,74,121,43,75,122,42,76,122,42,76,122,42,76,122,42,76,122,44,76,123,44,76,123,44,76,123,44,76,123,45,76,123,45,76,123,45,76,123,44,75,122,44,75,122,46,74,122,46,74,121,46,74,121,46,74,121,46,74,122,46,74,122,47,73,122,47,73,122,47,73,122,47,73,122,49,72,122,49,72,122,49,72,122,49,72,122,49,72,122,49,73,121,49,73,121,49,73,121,49,73,121,49,73,121,50,74,122,51,73,122,51,73,122,51,73,122,52,72,122,53,74,121,52,73,120,54,72,120,55,73,121,56,73,119,57,74,120,57,74,118,57,74,118,27,59,98,27,59,98,28,62,100,29,63,101,29,64,104,30,65,105,32,67,109,33,68,110,33,70,114,33,70,114,34,71,115,35,72,116,38,72,117,38,72,117,38,72,117,38,72,117,38,72,117,39,73,118,39,73,118,39,73,118,40,74,119,40,74,119,40,74,120,40,74,120,40,74,120,40,74,120,42,74,121,42,74,121,42,74,121,42,74,121,43,75,122,42,76,122,41,75,121,39,76,121,40,77,122,40,77,122,40,77,122,40,77,122,42,76,122,42,76,122,42,76,122,42,76,122,42,76,122,42,76,122,42,76,122,42,76,122,43,75,122,43,75,122,44,75,121,44,75,121,44,75,122,44,75,122,46,74,122,46,74,122,46,74,122,46,74,122,47,73,122,47,73,122,47,73,122,47,73,122,47,73,122,47,73,122,47,74,121,47,74,121,46,74,121,46,74,121,47,74,121,47,74,121,47,74,121,47,74,121,50,74,122,50,74,122,49,73,121,49,73,121,51,73,120,51,73,120,52,75,119,52,75,119,52,75,119};
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	3b18      	subs	r3, #24
 8000bf0:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <_ZN8LEDStrip13example_imageEv+0xf4>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	f243 738c 	movw	r3, #14220	; 0x378c
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f004 fd5e 	bl	80056bc <memcpy>
	uint8_t column = 79;
 8000c00:	234f      	movs	r3, #79	; 0x4f
 8000c02:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c06:	f102 0217 	add.w	r2, r2, #23
 8000c0a:	7013      	strb	r3, [r2, #0]
	unsigned int index = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c12:	f102 021c 	add.w	r2, r2, #28
 8000c16:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < column; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c1e:	f102 0218 	add.w	r2, r2, #24
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	f507 535e 	add.w	r3, r7, #14208	; 0x3780
 8000c28:	f103 0317 	add.w	r3, r3, #23
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c32:	f102 0218 	add.w	r2, r2, #24
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	da41      	bge.n	8000cc0 <_ZN8LEDStrip13example_imageEv+0xe8>
	{
		memcpy(&leds, &image_data[index], led_count * 3);
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	3b1c      	subs	r3, #28
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	3b18      	subs	r3, #24
 8000c4a:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c4e:	f102 021c 	add.w	r2, r2, #28
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	1899      	adds	r1, r3, r2
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	3b1c      	subs	r3, #28
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8000c62:	3324      	adds	r3, #36	; 0x24
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f004 fd24 	bl	80056bc <memcpy>
		index += 180;
 8000c74:	f507 535e 	add.w	r3, r7, #14208	; 0x3780
 8000c78:	f103 031c 	add.w	r3, r3, #28
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	33b4      	adds	r3, #180	; 0xb4
 8000c80:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000c84:	f102 021c 	add.w	r2, r2, #28
 8000c88:	6013      	str	r3, [r2, #0]
		update_led_data();
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	3b1c      	subs	r3, #28
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f7ff fd89 	bl	80007a8 <_ZN8LEDStrip15update_led_dataEv>
		update();
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	3b1c      	subs	r3, #28
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f7ff fc63 	bl	8000568 <_ZN8LEDStrip6updateEv>
		HAL_Delay(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 fe5a 	bl	800195c <HAL_Delay>
	for (int i = 0; i < column; i++)
 8000ca8:	f507 535e 	add.w	r3, r7, #14208	; 0x3780
 8000cac:	f103 0318 	add.w	r3, r3, #24
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f507 525e 	add.w	r2, r7, #14208	; 0x3780
 8000cb8:	f102 0218 	add.w	r2, r2, #24
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e7b1      	b.n	8000c24 <_ZN8LEDStrip13example_imageEv+0x4c>

	}
}
 8000cc0:	bf00      	nop
 8000cc2:	f507 575e 	add.w	r7, r7, #14208	; 0x3780
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08005700 	.word	0x08005700

08000cd0 <_Z12init_nextionv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_nextion()
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b0b8      	sub	sp, #224	; 0xe0
 8000cd4:	af00      	add	r7, sp, #0
	uint8_t main_screen[9] = {0x70, 0x61, 0x67, 0x65, 0x20, 0x30, 0xff, 0xff, 0xff};
 8000cd6:	4a4d      	ldr	r2, [pc, #308]	; (8000e0c <_Z12init_nextionv+0x13c>)
 8000cd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cde:	c303      	stmia	r3!, {r0, r1}
 8000ce0:	701a      	strb	r2, [r3, #0]
	uint8_t bright_slider[24] = {0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5F, 0x73, 0x6C, 0x69, 0x64, 0x65, 0x72, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <_Z12init_nextionv+0x140>)
 8000ce4:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8000ce8:	461d      	mov	r5, r3
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cf2:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t bright[17] = {0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <_Z12init_nextionv+0x144>)
 8000cf8:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	682b      	ldr	r3, [r5, #0]
 8000d04:	7023      	strb	r3, [r4, #0]
	uint8_t red_slider[28] = {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x72, 0x65, 0x64, 0x5F, 0x73, 0x6C, 0x69, 0x64, 0x65, 0x72, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <_Z12init_nextionv+0x148>)
 8000d08:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000d0c:	461d      	mov	r5, r3
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t red[21] = {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x72, 0x65, 0x64, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <_Z12init_nextionv+0x14c>)
 8000d1c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d20:	461d      	mov	r5, r3
 8000d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d2a:	6020      	str	r0, [r4, #0]
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	7021      	strb	r1, [r4, #0]
	uint8_t green_slider[30] = {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x67, 0x72, 0x65, 0x65, 0x6E, 0x5F, 0x73, 0x6C, 0x69, 0x64, 0x65, 0x72, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <_Z12init_nextionv+0x150>)
 8000d32:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000d36:	461d      	mov	r5, r3
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d40:	c407      	stmia	r4!, {r0, r1, r2}
 8000d42:	8023      	strh	r3, [r4, #0]
	uint8_t green[23]= {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x67, 0x72, 0x65, 0x65, 0x6E, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d44:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <_Z12init_nextionv+0x154>)
 8000d46:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d54:	6020      	str	r0, [r4, #0]
 8000d56:	3404      	adds	r4, #4
 8000d58:	8021      	strh	r1, [r4, #0]
 8000d5a:	3402      	adds	r4, #2
 8000d5c:	0c0b      	lsrs	r3, r1, #16
 8000d5e:	7023      	strb	r3, [r4, #0]
	uint8_t blue_slider[29] = {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x62, 0x6C, 0x75, 0x65, 0x5F, 0x73, 0x6C, 0x69, 0x64, 0x65, 0x72, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d60:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <_Z12init_nextionv+0x158>)
 8000d62:	f107 041c 	add.w	r4, r7, #28
 8000d66:	461d      	mov	r5, r3
 8000d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d70:	c407      	stmia	r4!, {r0, r1, r2}
 8000d72:	7023      	strb	r3, [r4, #0]
	uint8_t blue[22] = {0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x2E, 0x62, 0x6C, 0x75, 0x65, 0x2E, 0x76, 0x61, 0x6C, 0x3D, 0x31, 0x32, 0x37, 0xff, 0xff, 0xff};
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <_Z12init_nextionv+0x15c>)
 8000d76:	1d3c      	adds	r4, r7, #4
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d82:	6020      	str	r0, [r4, #0]
 8000d84:	3404      	adds	r4, #4
 8000d86:	8021      	strh	r1, [r4, #0]

	HAL_UART_Transmit(&huart1, main_screen, 9, 100);
 8000d88:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2209      	movs	r2, #9
 8000d90:	4827      	ldr	r0, [pc, #156]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000d92:	f003 fe54 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, bright_slider, 24, 100);
 8000d96:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8000d9a:	2364      	movs	r3, #100	; 0x64
 8000d9c:	2218      	movs	r2, #24
 8000d9e:	4824      	ldr	r0, [pc, #144]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000da0:	f003 fe4d 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, bright, 17, 100);
 8000da4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	2211      	movs	r2, #17
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000dae:	f003 fe46 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, red_slider, 28, 100);
 8000db2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	221c      	movs	r2, #28
 8000dba:	481d      	ldr	r0, [pc, #116]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000dbc:	f003 fe3f 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, red, 21, 100);
 8000dc0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	2215      	movs	r2, #21
 8000dc8:	4819      	ldr	r0, [pc, #100]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000dca:	f003 fe38 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, green_slider, 30, 100);
 8000dce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	221e      	movs	r2, #30
 8000dd6:	4816      	ldr	r0, [pc, #88]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000dd8:	f003 fe31 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, green, 23, 100);
 8000ddc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2217      	movs	r2, #23
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000de6:	f003 fe2a 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, blue_slider, 29, 100);
 8000dea:	f107 011c 	add.w	r1, r7, #28
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	221d      	movs	r2, #29
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000df4:	f003 fe23 	bl	8004a3e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, blue, 22, 100);
 8000df8:	1d39      	adds	r1, r7, #4
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	2216      	movs	r2, #22
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <_Z12init_nextionv+0x160>)
 8000e00:	f003 fe1d 	bl	8004a3e <HAL_UART_Transmit>
}
 8000e04:	bf00      	nop
 8000e06:	37e0      	adds	r7, #224	; 0xe0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	08008e8c 	.word	0x08008e8c
 8000e10:	08008e98 	.word	0x08008e98
 8000e14:	08008eb0 	.word	0x08008eb0
 8000e18:	08008ec4 	.word	0x08008ec4
 8000e1c:	08008ee0 	.word	0x08008ee0
 8000e20:	08008ef8 	.word	0x08008ef8
 8000e24:	08008f18 	.word	0x08008f18
 8000e28:	08008f30 	.word	0x08008f30
 8000e2c:	08008f50 	.word	0x08008f50
 8000e30:	20000118 	.word	0x20000118

08000e34 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e40:	f002 fefe 	bl	8003c40 <HAL_TIM_PWM_Stop_DMA>
	sent_flag = true;
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000070 	.word	0x20000070
 8000e58:	20000168 	.word	0x20000168

08000e5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (rx_data[1] == 1) // Brightness
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d138      	bne.n	8000ede <HAL_UART_RxCpltCallback+0x82>
	{
		if (rx_data[2] == 0) // Manual
 8000e6c:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000e6e:	789b      	ldrb	r3, [r3, #2]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d110      	bne.n	8000e96 <HAL_UART_RxCpltCallback+0x3a>
		{
			auto_brightness = false;
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_UART_RxCpltCallback+0xf8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]

			my_strip->set_brightness(rx_data[3]);
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a34      	ldr	r2, [pc, #208]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000e80:	78d2      	ldrb	r2, [r2, #3]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc01 	bl	800068c <_ZN8LEDStrip14set_brightnessEh>
			my_strip->update();
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb6a 	bl	8000568 <_ZN8LEDStrip6updateEv>
 8000e94:	e052      	b.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
		}
		else if (rx_data[2] == 1) // Auto
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d14e      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
		{
			if (rx_data[3] == 0) // Off
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000ea0:	78db      	ldrb	r3, [r3, #3]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d113      	bne.n	8000ece <HAL_UART_RxCpltCallback+0x72>
			{
				auto_brightness = false;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_UART_RxCpltCallback+0xf8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

				my_strip->set_brightness(rx_data[4]);
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000eb2:	7912      	ldrb	r2, [r2, #4]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fbe8 	bl	800068c <_ZN8LEDStrip14set_brightnessEh>
				my_strip->update();
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb51 	bl	8000568 <_ZN8LEDStrip6updateEv>

				ldr_data = 0;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <HAL_UART_RxCpltCallback+0x100>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e036      	b.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
			}
			else if (rx_data[3] == 1) // On
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d132      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
			{
				auto_brightness = true;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_UART_RxCpltCallback+0xf8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e02e      	b.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
			}
		}
	}
	else if (rx_data[1] == 2) // Single color set
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d10f      	bne.n	8000f06 <HAL_UART_RxCpltCallback+0xaa>
	{
		my_strip->set_single_color(rx_data[2], rx_data[3], rx_data[4]);
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000eec:	7899      	ldrb	r1, [r3, #2]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000ef0:	78da      	ldrb	r2, [r3, #3]
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	f7ff fbe7 	bl	80006c8 <_ZN8LEDStrip16set_single_colorEhhh>
		my_strip->update();
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb32 	bl	8000568 <_ZN8LEDStrip6updateEv>
 8000f04:	e01a      	b.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
	}
	else if (rx_data[1] == 3) // Set palette
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000f08:	785b      	ldrb	r3, [r3, #1]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d10d      	bne.n	8000f2a <HAL_UART_RxCpltCallback+0xce>
	{
		my_strip->set_palette(rx_data[2]);
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000f14:	7892      	ldrb	r2, [r2, #2]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fc03 	bl	8000724 <_ZN8LEDStrip11set_paletteEh>
		my_strip->update();
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb20 	bl	8000568 <_ZN8LEDStrip6updateEv>
 8000f28:	e008      	b.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
	}
	else if (rx_data[1] == 4) // Set palette
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d104      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0xe0>
	{
		my_strip->set_image();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_UART_RxCpltCallback+0xfc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc22 	bl	8000780 <_ZN8LEDStrip9set_imageEv>
	else
	{
		// Just ignore
	}

	HAL_UART_Receive_IT(huart, rx_data, 6);
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	4904      	ldr	r1, [pc, #16]	; (8000f50 <HAL_UART_RxCpltCallback+0xf4>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f003 fe0e 	bl	8004b62 <HAL_UART_Receive_IT>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000160 	.word	0x20000160
 8000f54:	20000167 	.word	0x20000167
 8000f58:	2000015c 	.word	0x2000015c
 8000f5c:	20000166 	.word	0x20000166

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	f5ad 5d5a 	sub.w	sp, sp, #13952	; 0x3680
 8000f66:	b082      	sub	sp, #8
 8000f68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fc85 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f883 	bl	8001078 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 fa5b 	bl	800142c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000f76:	f000 fa39 	bl	80013ec <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 8000f7a:	f000 f94b 	bl	8001214 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 8000f7e:	f000 f8ed 	bl	800115c <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 8000f82:	f000 fa05 	bl	8001390 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  init_nextion();
 8000f86:	f7ff fea3 	bl	8000cd0 <_Z12init_nextionv>

  LEDStrip strip(60, &sent_flag, &htim1, TIM_CHANNEL_1);
 8000f8a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000f8e:	383c      	subs	r0, #60	; 0x3c
 8000f90:	2300      	movs	r3, #0
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <main+0xf8>)
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <main+0xfc>)
 8000f98:	213c      	movs	r1, #60	; 0x3c
 8000f9a:	f7ff fa99 	bl	80004d0 <_ZN8LEDStripC1EhPbP17TIM_HandleTypeDefm>
  my_strip = &strip;
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <main+0x100>)
 8000fa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa4:	3b3c      	subs	r3, #60	; 0x3c
 8000fa6:	6013      	str	r3, [r2, #0]
  uint8_t temp;

  HAL_UART_Receive_IT(&huart1, rx_data, 6);
 8000fa8:	2206      	movs	r2, #6
 8000faa:	492e      	ldr	r1, [pc, #184]	; (8001064 <main+0x104>)
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <main+0x108>)
 8000fae:	f003 fdd8 	bl	8004b62 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (auto_brightness)
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <main+0x10c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0fb      	beq.n	8000fb2 <main+0x52>
	  {
		  HAL_ADC_Start(&hadc1);
 8000fba:	482d      	ldr	r0, [pc, #180]	; (8001070 <main+0x110>)
 8000fbc:	f000 fd36 	bl	8001a2c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc4:	482a      	ldr	r0, [pc, #168]	; (8001070 <main+0x110>)
 8000fc6:	f000 fe18 	bl	8001bfa <HAL_ADC_PollForConversion>

		  if (auto_brightness)
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <main+0x10c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d03e      	beq.n	8001050 <main+0xf0>
		  {
			  temp = HAL_ADC_GetValue(&hadc1);
 8000fd2:	4827      	ldr	r0, [pc, #156]	; (8001070 <main+0x110>)
 8000fd4:	f000 fe9c 	bl	8001d10 <HAL_ADC_GetValue>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f507 5259 	add.w	r2, r7, #13888	; 0x3640
 8000fde:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000fe2:	7013      	strb	r3, [r2, #0]

			  if ((temp - ldr_data > 8) || (ldr_data - temp > 8) || ldr_data == 0)
 8000fe4:	f507 5359 	add.w	r3, r7, #13888	; 0x3640
 8000fe8:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <main+0x114>)
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	dc0e      	bgt.n	8001016 <main+0xb6>
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <main+0x114>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f507 5359 	add.w	r3, r7, #13888	; 0x3640
 8001002:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b08      	cmp	r3, #8
 800100c:	dc03      	bgt.n	8001016 <main+0xb6>
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0x114>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d11c      	bne.n	8001050 <main+0xf0>
			  {
				  ldr_data = temp;
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <main+0x114>)
 8001018:	f507 5359 	add.w	r3, r7, #13888	; 0x3640
 800101c:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	7013      	strb	r3, [r2, #0]

				  if (ldr_data > 248)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <main+0x114>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2bf8      	cmp	r3, #248	; 0xf8
 800102a:	d902      	bls.n	8001032 <main+0xd2>
				  {
					  ldr_data = 248;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <main+0x114>)
 800102e:	22f8      	movs	r2, #248	; 0xf8
 8001030:	701a      	strb	r2, [r3, #0]
				  }

				  my_strip->set_brightness(255 - ldr_data);
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <main+0x100>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <main+0x114>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	43db      	mvns	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f7ff fb23 	bl	800068c <_ZN8LEDStrip14set_brightnessEh>
				  my_strip->update();
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <main+0x100>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa8c 	bl	8000568 <_ZN8LEDStrip6updateEv>
			  }
		  }
		  HAL_ADC_Stop(&hadc1);
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <main+0x110>)
 8001052:	f000 fd9f 	bl	8001b94 <HAL_ADC_Stop>
	  if (auto_brightness)
 8001056:	e7ac      	b.n	8000fb2 <main+0x52>
 8001058:	20000070 	.word	0x20000070
 800105c:	20000168 	.word	0x20000168
 8001060:	2000015c 	.word	0x2000015c
 8001064:	20000160 	.word	0x20000160
 8001068:	20000118 	.word	0x20000118
 800106c:	20000167 	.word	0x20000167
 8001070:	20000028 	.word	0x20000028
 8001074:	20000166 	.word	0x20000166

08001078 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fb26 	bl	80056d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <_Z18SystemClock_Configv+0xdc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a25      	ldr	r2, [pc, #148]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <_Z18SystemClock_Configv+0xe0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010ec:	2348      	movs	r3, #72	; 0x48
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fedb 	bl	8002eb8 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001112:	f000 f9e7 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f938 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf14      	ite	ne
 800113e:	2301      	movne	r3, #1
 8001140:	2300      	moveq	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001148:	f000 f9cc 	bl	80014e4 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	; 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 8001170:	4a26      	ldr	r2, [pc, #152]	; (800120c <_ZL12MX_ADC1_Initv+0xb0>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 800117c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001180:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <_ZL12MX_ADC1_Initv+0xb4>)
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011be:	f000 fbf1 	bl	80019a4 <HAL_ADC_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80011d2:	f000 f987 	bl	80014e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011de:	2307      	movs	r3, #7
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <_ZL12MX_ADC1_Initv+0xac>)
 80011e8:	f000 fda0 	bl	8001d2c <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 80011fc:	f000 f972 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000028 	.word	0x20000028
 800120c:	40012000 	.word	0x40012000
 8001210:	0f000001 	.word	0x0f000001

08001214 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b096      	sub	sp, #88	; 0x58
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fa43 	bl	80056d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001252:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <_ZL12MX_TIM1_Initv+0x178>)
 8001256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001266:	2259      	movs	r2, #89	; 0x59
 8001268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b44      	ldr	r3, [pc, #272]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127c:	4842      	ldr	r0, [pc, #264]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 800127e:	f002 fa8f 	bl	80037a0 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 8001292:	f000 f927 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a0:	4619      	mov	r1, r3
 80012a2:	4839      	ldr	r0, [pc, #228]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 80012a4:	f002 fe48 	bl	8003f38 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 80012b8:	f000 f914 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 80012be:	f002 fabe 	bl	800383e <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 80012d2:	f000 f907 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e2:	4619      	mov	r1, r3
 80012e4:	4828      	ldr	r0, [pc, #160]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 80012e6:	f003 fa9d 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 80012fa:	f000 f8f3 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fe:	2360      	movs	r3, #96	; 0x60
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4819      	ldr	r0, [pc, #100]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001324:	f002 fd4a 	bl	8003dbc <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001338:	f000 f8d4 	bl	80014e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 8001360:	f003 face 	bl	8004900 <HAL_TIMEx_ConfigBreakDeadTime>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZL12MX_TIM1_Initv+0x164>
  {
    Error_Handler();
 8001374:	f000 f8b6 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <_ZL12MX_TIM1_Initv+0x174>)
 800137a:	f000 f979 	bl	8001670 <HAL_TIM_MspPostInit>

}
 800137e:	bf00      	nop
 8001380:	3758      	adds	r7, #88	; 0x58
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000070 	.word	0x20000070
 800138c:	40010000 	.word	0x40010000

08001390 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800139c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80013c8:	f003 faec 	bl	80049a4 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80013dc:	f000 f882 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000118 	.word	0x20000118
 80013e8:	40011000 	.word	0x40011000

080013ec <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <_ZL11MX_DMA_Initv+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <_ZL11MX_DMA_Initv+0x3c>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <_ZL11MX_DMA_Initv+0x3c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2039      	movs	r0, #57	; 0x39
 8001414:	f000 ff93 	bl	800233e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001418:	2039      	movs	r0, #57	; 0x39
 800141a:	f000 ffac 	bl	8002376 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <_ZL12MX_GPIO_Initv+0xb0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <_ZL12MX_GPIO_Initv+0xb4>)
 80014ce:	f001 fb6f 	bl	8002bb0 <HAL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800152e:	2005      	movs	r0, #5
 8001530:	f000 fefa 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_ADC_MspInit+0x7c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d127      	bne.n	80015b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_ADC_MspInit+0x80>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_ADC_MspInit+0x84>)
 80015ae:	f001 faff 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012000 	.word	0x40012000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_TIM_Base_MspInit+0x98>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13d      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_TIM_Base_MspInit+0x9c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_TIM_Base_MspInit+0xa4>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 80015fe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800161a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800161e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001626:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800163c:	f000 feb6 	bl	80023ac <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001646:	f7ff ff4d 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_TIM_Base_MspInit+0xa0>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010000 	.word	0x40010000
 8001664:	40023800 	.word	0x40023800
 8001668:	200000b8 	.word	0x200000b8
 800166c:	40026428 	.word	0x40026428

08001670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <HAL_TIM_MspPostInit+0x68>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11e      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_TIM_MspPostInit+0x6c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_TIM_MspPostInit+0x6c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_TIM_MspPostInit+0x6c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_TIM_MspPostInit+0x70>)
 80016cc:	f001 fa70 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_UART_MspInit+0x94>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d134      	bne.n	8001770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_UART_MspInit+0x98>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_UART_MspInit+0x98>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_UART_MspInit+0x98>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x98>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_UART_MspInit+0x98>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_UART_MspInit+0x98>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800173e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001750:	2307      	movs	r3, #7
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <HAL_UART_MspInit+0x9c>)
 800175c:	f001 fa28 	bl	8002bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2101      	movs	r1, #1
 8001764:	2025      	movs	r0, #37	; 0x25
 8001766:	f000 fdea 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176a:	2025      	movs	r0, #37	; 0x25
 800176c:	f000 fe03 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40011000 	.word	0x40011000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 f8a4 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART1_IRQHandler+0x10>)
 80017de:	f003 f9f1 	bl	8004bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000118 	.word	0x20000118

080017ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA2_Stream1_IRQHandler+0x10>)
 80017f2:	f000 ff73 	bl	80026dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000b8 	.word	0x200000b8

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f003 ff0f 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fb83 	bl	8000f60 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001868:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 800186c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001870:	20000170 	.word	0x20000170

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 fd41 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fe20 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd59 	bl	8002392 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 fd21 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000008 	.word	0x20000008
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	2000016c 	.word	0x2000016c

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000016c 	.word	0x2000016c

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffee 	bl	8001944 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffde 	bl	8001944 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e033      	b.n	8001a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fdbc 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ea:	f023 0302 	bic.w	r3, r3, #2
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 faca 	bl	8001f90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
 8001a12:	e001      	b.n	8001a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Start+0x1a>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e097      	b.n	8001b76 <HAL_ADC_Start+0x14a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d018      	beq.n	8001a8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_ADC_Start+0x158>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_ADC_Start+0x15c>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9a      	lsrs	r2, r3, #18
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d15f      	bne.n	8001b5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f023 0206 	bic.w	r2, r3, #6
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae8:	e002      	b.n	8001af0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_ADC_Start+0x160>)
 8001afa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d129      	bne.n	8001b74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e020      	b.n	8001b74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_ADC_Start+0x164>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d11b      	bne.n	8001b74 <HAL_ADC_Start+0x148>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d114      	bne.n	8001b74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	e00b      	b.n	8001b74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f043 0210 	orr.w	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	40012300 	.word	0x40012300
 8001b90:	40012000 	.word	0x40012000

08001b94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Stop+0x16>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e021      	b.n	8001bee <HAL_ADC_Stop+0x5a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d113      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c26:	d10b      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e063      	b.n	8001d08 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c40:	f7ff fe80 	bl	8001944 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c46:	e021      	b.n	8001c8c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d01d      	beq.n	8001c8c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_ADC_PollForConversion+0x6c>
 8001c56:	f7ff fe75 	bl	8001944 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d212      	bcs.n	8001c8c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d00b      	beq.n	8001c8c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0204 	orr.w	r2, r3, #4
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e03d      	b.n	8001d08 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d1d6      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f06f 0212 	mvn.w	r2, #18
 8001ca2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d123      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11f      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e113      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x244>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d925      	bls.n	8001da4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b1e      	subs	r3, #30
 8001d6e:	2207      	movs	r2, #7
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4403      	add	r3, r0
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	e022      	b.n	8001dea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	2207      	movs	r2, #7
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6919      	ldr	r1, [r3, #16]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4403      	add	r3, r0
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d824      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b05      	subs	r3, #5
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b05      	subs	r3, #5
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	e04c      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d824      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b23      	subs	r3, #35	; 0x23
 8001e56:	221f      	movs	r2, #31
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b23      	subs	r3, #35	; 0x23
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8c:	e023      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b41      	subs	r3, #65	; 0x41
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b41      	subs	r3, #65	; 0x41
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_ADC_ConfigChannel+0x250>)
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <HAL_ADC_ConfigChannel+0x254>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10f      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d8>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d10b      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_ADC_ConfigChannel+0x254>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x23a>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <HAL_ADC_ConfigChannel+0x258>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x1f4>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b11      	cmp	r3, #17
 8001f1e:	d122      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_ADC_ConfigChannel+0x258>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_ADC_ConfigChannel+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_ADC_ConfigChannel+0x260>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9a      	lsrs	r2, r3, #18
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	40012000 	.word	0x40012000
 8001f84:	10000012 	.word	0x10000012
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	431bde83 	.word	0x431bde83

08001f90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f98:	4b79      	ldr	r3, [pc, #484]	; (8002180 <ADC_Init+0x1f0>)
 8001f9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	021a      	lsls	r2, r3, #8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <ADC_Init+0x1f4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002036:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	e00f      	b.n	800208e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800207c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800208c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0202 	bic.w	r2, r2, #2
 800209c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e1b      	ldrb	r3, [r3, #24]
 80020a8:	005a      	lsls	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	3b01      	subs	r3, #1
 80020e8:	035a      	lsls	r2, r3, #13
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	e007      	b.n	8002104 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002102:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	3b01      	subs	r3, #1
 8002120:	051a      	lsls	r2, r3, #20
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002146:	025a      	lsls	r2, r3, #9
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	029a      	lsls	r2, r3, #10
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40012300 	.word	0x40012300
 8002184:	0f000001 	.word	0x0f000001

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff8e 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff29 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff3e 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff8e 	bl	800227c <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5d 	bl	8002228 <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff31 	bl	80021ec <__NVIC_EnableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa2 	bl	80022e4 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fac4 	bl	8001944 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e099      	b.n	80024fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e8:	e00f      	b.n	800240a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ea:	f7ff faab 	bl	8001944 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d908      	bls.n	800240a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e078      	b.n	80024fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e8      	bne.n	80023ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_DMA_Init+0x158>)
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4313      	orrs	r3, r2
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b04      	cmp	r3, #4
 800249c:	d117      	bne.n	80024ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fb01 	bl	8002ab8 <DMA_CheckFifoParam>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ca:	2301      	movs	r3, #1
 80024cc:	e016      	b.n	80024fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fab8 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 80024dc:	4603      	mov	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	f010803f 	.word	0xf010803f

08002508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_DMA_Start_IT+0x26>
 800252a:	2302      	movs	r3, #2
 800252c:	e040      	b.n	80025b0 <HAL_DMA_Start_IT+0xa8>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12f      	bne.n	80025a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa4a 	bl	80029f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	223f      	movs	r2, #63	; 0x3f
 8002562:	409a      	lsls	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0216 	orr.w	r2, r2, #22
 8002576:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c6:	f7ff f9bd 	bl	8001944 <HAL_GetTick>
 80025ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e052      	b.n	8002690 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0216 	bic.w	r2, r2, #22
 80025f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002608:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_DMA_Abort+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800263a:	e013      	b.n	8002664 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263c:	f7ff f982 	bl	8001944 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b05      	cmp	r3, #5
 8002648:	d90c      	bls.n	8002664 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2203      	movs	r2, #3
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e015      	b.n	8002690 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e4      	bne.n	800263c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d004      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00c      	b.n	80026d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2205      	movs	r2, #5
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_DMA_IRQHandler+0x258>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a92      	ldr	r2, [pc, #584]	; (8002938 <HAL_DMA_IRQHandler+0x25c>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2208      	movs	r2, #8
 8002708:	409a      	lsls	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0204 	bic.w	r2, r2, #4
 800272e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2208      	movs	r2, #8
 8002736:	409a      	lsls	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2204      	movs	r2, #4
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2204      	movs	r2, #4
 80027a2:	409a      	lsls	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2210      	movs	r2, #16
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d043      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03c      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2210      	movs	r2, #16
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d018      	beq.n	800281e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d024      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e01f      	b.n	800284c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
 800281c:	e016      	b.n	800284c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0208 	bic.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2220      	movs	r2, #32
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 808e 	beq.w	800297a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8086 	beq.w	800297a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2220      	movs	r2, #32
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b05      	cmp	r3, #5
 8002884:	d136      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0216 	bic.w	r2, r2, #22
 8002894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x1da>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0208 	bic.w	r2, r2, #8
 80028c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	223f      	movs	r2, #63	; 0x3f
 80028cc:	409a      	lsls	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
        }
        return;
 80028f2:	e078      	b.n	80029e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01c      	beq.n	800293c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	2b00      	cmp	r3, #0
 8002916:	d030      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e02b      	b.n	800297a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d027      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e022      	b.n	800297a <HAL_DMA_IRQHandler+0x29e>
 8002934:	20000000 	.word	0x20000000
 8002938:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0210 	bic.w	r2, r2, #16
 8002958:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	2b00      	cmp	r3, #0
 8002980:	d032      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d022      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2205      	movs	r2, #5
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d307      	bcc.n	80029c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f2      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x2ca>
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e000      	b.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029e6:	bf00      	nop
    }
  }
}
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop

080029f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3b10      	subs	r3, #16
 8002a5c:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d909      	bls.n	8002a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a8c:	e007      	b.n	8002a9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	aaaaaaab 	.word	0xaaaaaaab
 8002ab4:	08008f80 	.word	0x08008f80

08002ab8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0x5a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d856      	bhi.n	8002b86 <DMA_CheckFifoParam+0xce>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <DMA_CheckFifoParam+0x28>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b03 	.word	0x08002b03
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b87 	.word	0x08002b87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d046      	beq.n	8002b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e043      	b.n	8002b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0a:	d140      	bne.n	8002b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e03d      	b.n	8002b8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d121      	bne.n	8002b60 <DMA_CheckFifoParam+0xa8>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d837      	bhi.n	8002b92 <DMA_CheckFifoParam+0xda>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <DMA_CheckFifoParam+0x70>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b3f 	.word	0x08002b3f
 8002b30:	08002b39 	.word	0x08002b39
 8002b34:	08002b51 	.word	0x08002b51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e030      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d025      	beq.n	8002b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e022      	b.n	8002b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b58:	d11f      	bne.n	8002b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5e:	e01c      	b.n	8002b9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d903      	bls.n	8002b6e <DMA_CheckFifoParam+0xb6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b6c:	e018      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      break;
 8002b72:	e015      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e00b      	b.n	8002b9e <DMA_CheckFifoParam+0xe6>
      break;
 8002b86:	bf00      	nop
 8002b88:	e00a      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e008      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e006      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e004      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e159      	b.n	8002e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 8148 	bne.w	8002e7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d005      	beq.n	8002c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d130      	bne.n	8002c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d017      	beq.n	8002ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a2 	beq.w	8002e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_GPIO_Init+0x2e8>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d52:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_GPIO_Init+0x2ec>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a49      	ldr	r2, [pc, #292]	; (8002ea0 <HAL_GPIO_Init+0x2f0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x202>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <HAL_GPIO_Init+0x2f4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x1fe>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_GPIO_Init+0x2f8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x1fa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a46      	ldr	r2, [pc, #280]	; (8002eac <HAL_GPIO_Init+0x2fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x1f6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_GPIO_Init+0x300>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x1f2>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x204>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_GPIO_Init+0x2ec>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df6:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_GPIO_Init+0x304>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f aea2 	bls.w	8002bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e264      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d075      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed6:	4ba3      	ldr	r3, [pc, #652]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4ba0      	ldr	r3, [pc, #640]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b9d      	ldr	r3, [pc, #628]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b99      	ldr	r3, [pc, #612]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e23f      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x74>
 8002f1e:	4b91      	ldr	r3, [pc, #580]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a90      	ldr	r2, [pc, #576]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a8a      	ldr	r2, [pc, #552]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a87      	ldr	r2, [pc, #540]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f50:	4b84      	ldr	r3, [pc, #528]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a83      	ldr	r2, [pc, #524]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b81      	ldr	r3, [pc, #516]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fce8 	bl	8001944 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fce4 	bl	8001944 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e204      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fcd4 	bl	8001944 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fcd0 	bl	8001944 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1f0      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c4      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b56      	ldr	r3, [pc, #344]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4952      	ldr	r1, [pc, #328]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <HAL_RCC_OscConfig+0x2b0>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fc89 	bl	8001944 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fc85 	bl	8001944 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a5      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4940      	ldr	r1, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0x2b0>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fc68 	bl	8001944 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fc64 	bl	8001944 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e184      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d030      	beq.n	8003104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_RCC_OscConfig+0x2b4>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fc48 	bl	8001944 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fc44 	bl	8001944 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e164      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x200>
 80030d6:	e015      	b.n	8003104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x2b4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe fc31 	bl	8001944 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe fc2d 	bl	8001944 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e14d      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a0 	beq.w	8003252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_OscConfig+0x2b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d121      	bne.n	8003192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_OscConfig+0x2b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a07      	ldr	r2, [pc, #28]	; (8003170 <HAL_RCC_OscConfig+0x2b8>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fe fbf3 	bl	8001944 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e011      	b.n	8003186 <HAL_RCC_OscConfig+0x2ce>
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	42470000 	.word	0x42470000
 800316c:	42470e80 	.word	0x42470e80
 8003170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003174:	f7fe fbe6 	bl	8001944 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e106      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b85      	ldr	r3, [pc, #532]	; (800339c <HAL_RCC_OscConfig+0x4e4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
 800319a:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a80      	ldr	r2, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	e01c      	b.n	80031e2 <HAL_RCC_OscConfig+0x32a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x312>
 80031b0:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0x32a>
 80031ca:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a74      	ldr	r2, [pc, #464]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d015      	beq.n	8003216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fbab 	bl	8001944 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fba7 	bl	8001944 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0c5      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ee      	beq.n	80031f2 <HAL_RCC_OscConfig+0x33a>
 8003214:	e014      	b.n	8003240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fe fb95 	bl	8001944 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fe fb91 	bl	8001944 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f241 3288 	movw	r2, #5000	; 0x1388
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0af      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ee      	bne.n	800321e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a55      	ldr	r2, [pc, #340]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 809b 	beq.w	8003392 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d05c      	beq.n	8003322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d141      	bne.n	80032f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe fb65 	bl	8001944 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe fb61 	bl	8001944 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e081      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003290:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	019b      	lsls	r3, r3, #6
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	3b01      	subs	r3, #1
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	4937      	ldr	r1, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb3a 	bl	8001944 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fb36 	bl	8001944 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e056      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x41c>
 80032f2:	e04e      	b.n	8003392 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe fb23 	bl	8001944 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe fb1f 	bl	8001944 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e03f      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_OscConfig+0x44a>
 8003320:	e037      	b.n	8003392 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e032      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d028      	beq.n	800338e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d121      	bne.n	800338e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d11a      	bne.n	800338e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003364:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003366:	4293      	cmp	r3, r2
 8003368:	d111      	bne.n	800338e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d107      	bne.n	800338e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40007000 	.word	0x40007000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470060 	.word	0x42470060

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0cc      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b68      	ldr	r3, [pc, #416]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90c      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d044      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e067      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4934      	ldr	r1, [pc, #208]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7fe fa54 	bl	8001944 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fe fa50 	bl	8001944 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d20c      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe f9b4 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	08008f68 	.word	0x08008f68
 800356c:	20000000 	.word	0x20000000
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	2300      	movs	r3, #0
 8003586:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358c:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003598:	2b08      	cmp	r3, #8
 800359a:	f200 80bd 	bhi.w	8003718 <HAL_RCC_GetSysClockFreq+0x1a4>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x34>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3a>
 80035a6:	e0b7      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035aa:	60bb      	str	r3, [r7, #8]
       break;
 80035ac:	e0b7      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035b0:	60bb      	str	r3, [r7, #8]
      break;
 80035b2:	e0b4      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b5d      	ldr	r3, [pc, #372]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035be:	4b5b      	ldr	r3, [pc, #364]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d04d      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b58      	ldr	r3, [pc, #352]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	461a      	mov	r2, r3
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	ea02 0800 	and.w	r8, r2, r0
 80035e2:	ea03 0901 	and.w	r9, r3, r1
 80035e6:	4640      	mov	r0, r8
 80035e8:	4649      	mov	r1, r9
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	014b      	lsls	r3, r1, #5
 80035f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035f8:	0142      	lsls	r2, r0, #5
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	ebb0 0008 	subs.w	r0, r0, r8
 8003602:	eb61 0109 	sbc.w	r1, r1, r9
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	018b      	lsls	r3, r1, #6
 8003610:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003614:	0182      	lsls	r2, r0, #6
 8003616:	1a12      	subs	r2, r2, r0
 8003618:	eb63 0301 	sbc.w	r3, r3, r1
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	00d9      	lsls	r1, r3, #3
 8003626:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800362a:	00d0      	lsls	r0, r2, #3
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	eb12 0208 	adds.w	r2, r2, r8
 8003634:	eb43 0309 	adc.w	r3, r3, r9
 8003638:	f04f 0000 	mov.w	r0, #0
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	0259      	lsls	r1, r3, #9
 8003642:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003646:	0250      	lsls	r0, r2, #9
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	f7fc fdbe 	bl	80001d8 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e04a      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003666:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	461a      	mov	r2, r3
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	ea02 0400 	and.w	r4, r2, r0
 800367e:	ea03 0501 	and.w	r5, r3, r1
 8003682:	4620      	mov	r0, r4
 8003684:	4629      	mov	r1, r5
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	014b      	lsls	r3, r1, #5
 8003690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003694:	0142      	lsls	r2, r0, #5
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	1b00      	subs	r0, r0, r4
 800369c:	eb61 0105 	sbc.w	r1, r1, r5
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	018b      	lsls	r3, r1, #6
 80036aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036ae:	0182      	lsls	r2, r0, #6
 80036b0:	1a12      	subs	r2, r2, r0
 80036b2:	eb63 0301 	sbc.w	r3, r3, r1
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	00d9      	lsls	r1, r3, #3
 80036c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c4:	00d0      	lsls	r0, r2, #3
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	1912      	adds	r2, r2, r4
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	0299      	lsls	r1, r3, #10
 80036da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036de:	0290      	lsls	r0, r2, #10
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	f7fc fd72 	bl	80001d8 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	3301      	adds	r3, #1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	60bb      	str	r3, [r7, #8]
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800371a:	60bb      	str	r3, [r7, #8]
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	68bb      	ldr	r3, [r7, #8]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	00f42400 	.word	0x00f42400
 8003734:	007a1200 	.word	0x007a1200

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_RCC_GetHCLKFreq+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000000 	.word	0x20000000

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003754:	f7ff fff0 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08008f78 	.word	0x08008f78

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800377c:	f7ff ffdc 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0b5b      	lsrs	r3, r3, #13
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08008f78 	.word	0x08008f78

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e041      	b.n	8003836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fefe 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 fd54 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e041      	b.n	80038d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f839 	bl	80038dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fd05 	bl	800428c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start_DMA+0x28>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start_DMA+0x42>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0x6e>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0x6e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	e158      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_TIM_PWM_Start_DMA+0x90>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e022      	b.n	80039c6 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d109      	bne.n	800399a <HAL_TIM_PWM_Start_DMA+0xaa>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e015      	b.n	80039c6 <HAL_TIM_PWM_Start_DMA+0xd6>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d109      	bne.n	80039b4 <HAL_TIM_PWM_Start_DMA+0xc4>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e008      	b.n	80039c6 <HAL_TIM_PWM_Start_DMA+0xd6>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start_DMA+0xea>
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e11e      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start_DMA+0xfa>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e8:	e016      	b.n	8003a18 <HAL_TIM_PWM_Start_DMA+0x128>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start_DMA+0x10a>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	e00e      	b.n	8003a18 <HAL_TIM_PWM_Start_DMA+0x128>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	e006      	b.n	8003a18 <HAL_TIM_PWM_Start_DMA+0x128>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a12:	e001      	b.n	8003a18 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0ff      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	f200 80ae 	bhi.w	8003b7c <HAL_TIM_PWM_Start_DMA+0x28c>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b7d 	.word	0x08003b7d
 8003a30:	08003b7d 	.word	0x08003b7d
 8003a34:	08003b7d 	.word	0x08003b7d
 8003a38:	08003aa5 	.word	0x08003aa5
 8003a3c:	08003b7d 	.word	0x08003b7d
 8003a40:	08003b7d 	.word	0x08003b7d
 8003a44:	08003b7d 	.word	0x08003b7d
 8003a48:	08003aed 	.word	0x08003aed
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003b7d 	.word	0x08003b7d
 8003a58:	08003b35 	.word	0x08003b35
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	4a6f      	ldr	r2, [pc, #444]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	4a6e      	ldr	r2, [pc, #440]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	4a6d      	ldr	r2, [pc, #436]	; (8003c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003a72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3334      	adds	r3, #52	; 0x34
 8003a80:	461a      	mov	r2, r3
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	f7fe fd40 	bl	8002508 <HAL_DMA_Start_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0c2      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa0:	60da      	str	r2, [r3, #12]
      break;
 8003aa2:	e06c      	b.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	4a5c      	ldr	r2, [pc, #368]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	4a5b      	ldr	r2, [pc, #364]	; (8003c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3338      	adds	r3, #56	; 0x38
 8003ac8:	461a      	mov	r2, r3
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	f7fe fd1c 	bl	8002508 <HAL_DMA_Start_IT>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e09e      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae8:	60da      	str	r2, [r3, #12]
      break;
 8003aea:	e048      	b.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	333c      	adds	r3, #60	; 0x3c
 8003b10:	461a      	mov	r2, r3
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	f7fe fcf8 	bl	8002508 <HAL_DMA_Start_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07a      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b30:	60da      	str	r2, [r3, #12]
      break;
 8003b32:	e024      	b.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	4a39      	ldr	r2, [pc, #228]	; (8003c20 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a38      	ldr	r2, [pc, #224]	; (8003c24 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4a37      	ldr	r2, [pc, #220]	; (8003c28 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3340      	adds	r3, #64	; 0x40
 8003b58:	461a      	mov	r2, r3
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	f7fe fcd4 	bl	8002508 <HAL_DMA_Start_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e056      	b.n	8003c18 <HAL_TIM_PWM_Start_DMA+0x328>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b78:	60da      	str	r2, [r3, #12]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003b7c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fe26 	bl	80047d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d013      	beq.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d111      	bne.n	8003c06 <HAL_TIM_PWM_Start_DMA+0x316>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d010      	beq.n	8003c16 <HAL_TIM_PWM_Start_DMA+0x326>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	e007      	b.n	8003c16 <HAL_TIM_PWM_Start_DMA+0x326>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	0800417b 	.word	0x0800417b
 8003c24:	08004223 	.word	0x08004223
 8003c28:	080040e9 	.word	0x080040e9
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40014000 	.word	0x40014000

08003c40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d855      	bhi.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003cfd 	.word	0x08003cfd
 8003c60:	08003cfd 	.word	0x08003cfd
 8003c64:	08003cfd 	.word	0x08003cfd
 8003c68:	08003ca9 	.word	0x08003ca9
 8003c6c:	08003cfd 	.word	0x08003cfd
 8003c70:	08003cfd 	.word	0x08003cfd
 8003c74:	08003cfd 	.word	0x08003cfd
 8003c78:	08003cc5 	.word	0x08003cc5
 8003c7c:	08003cfd 	.word	0x08003cfd
 8003c80:	08003cfd 	.word	0x08003cfd
 8003c84:	08003cfd 	.word	0x08003cfd
 8003c88:	08003ce1 	.word	0x08003ce1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fcf9 	bl	8002698 <HAL_DMA_Abort_IT>
      break;
 8003ca6:	e02a      	b.n	8003cfe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fceb 	bl	8002698 <HAL_DMA_Abort_IT>
      break;
 8003cc2:	e01c      	b.n	8003cfe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fcdd 	bl	8002698 <HAL_DMA_Abort_IT>
      break;
 8003cde:	e00e      	b.n	8003cfe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fccf 	bl	8002698 <HAL_DMA_Abort_IT>
      break;
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003cfc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fd66 	bl	80047d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d117      	bne.n	8003d46 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_PWM_Stop_DMA+0x146>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	e013      	b.n	8003dae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Stop_DMA+0x156>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	e00b      	b.n	8003dae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Stop_DMA+0x166>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	e003      	b.n	8003dae <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40010000 	.word	0x40010000

08003dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0ac      	b.n	8003f30 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	f200 809f 	bhi.w	8003f24 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003f25 	.word	0x08003f25
 8003df4:	08003f25 	.word	0x08003f25
 8003df8:	08003f25 	.word	0x08003f25
 8003dfc:	08003e61 	.word	0x08003e61
 8003e00:	08003f25 	.word	0x08003f25
 8003e04:	08003f25 	.word	0x08003f25
 8003e08:	08003f25 	.word	0x08003f25
 8003e0c:	08003ea3 	.word	0x08003ea3
 8003e10:	08003f25 	.word	0x08003f25
 8003e14:	08003f25 	.word	0x08003f25
 8003e18:	08003f25 	.word	0x08003f25
 8003e1c:	08003ee3 	.word	0x08003ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fab0 	bl	800438c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0208 	orr.w	r2, r2, #8
 8003e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0204 	bic.w	r2, r2, #4
 8003e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6999      	ldr	r1, [r3, #24]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	619a      	str	r2, [r3, #24]
      break;
 8003e5e:	e062      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 faf6 	bl	8004458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6999      	ldr	r1, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	619a      	str	r2, [r3, #24]
      break;
 8003ea0:	e041      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fb41 	bl	8004530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0208 	orr.w	r2, r2, #8
 8003ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0204 	bic.w	r2, r2, #4
 8003ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69d9      	ldr	r1, [r3, #28]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	61da      	str	r2, [r3, #28]
      break;
 8003ee0:	e021      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fb8b 	bl	8004604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	021a      	lsls	r2, r3, #8
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	61da      	str	r2, [r3, #28]
      break;
 8003f22:	e000      	b.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIM_ConfigClockSource+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0b3      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x180>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d03e      	beq.n	8004008 <HAL_TIM_ConfigClockSource+0xd0>
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8e:	f200 8087 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	f000 8085 	beq.w	80040a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	d87f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d01a      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xa2>
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d87b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d050      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x116>
 8003fac:	2b60      	cmp	r3, #96	; 0x60
 8003fae:	d877      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fb0:	2b50      	cmp	r3, #80	; 0x50
 8003fb2:	d03c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xf6>
 8003fb4:	2b50      	cmp	r3, #80	; 0x50
 8003fb6:	d873      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d058      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x136>
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d86f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b30      	cmp	r3, #48	; 0x30
 8003fc2:	d064      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d86b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d060      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d867      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d05a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fd8:	e062      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f000 fbd5 	bl	8004798 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	609a      	str	r2, [r3, #8]
      break;
 8004006:	e04e      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f000 fbbe 	bl	8004798 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402a:	609a      	str	r2, [r3, #8]
      break;
 800402c:	e03b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fb32 	bl	80046a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2150      	movs	r1, #80	; 0x50
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fb8b 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800404c:	e02b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fb51 	bl	8004702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2160      	movs	r1, #96	; 0x60
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb7b 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800406c:	e01b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fb12 	bl	80046a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2140      	movs	r1, #64	; 0x40
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb6b 	bl	8004762 <TIM_ITRx_SetConfig>
      break;
 800408c:	e00b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f000 fb62 	bl	8004762 <TIM_ITRx_SetConfig>
        break;
 800409e:	e002      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410e:	e02a      	b.n	8004166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d107      	bne.n	800412a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	e01d      	b.n	8004166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2204      	movs	r2, #4
 8004138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004142:	e010      	b.n	8004166 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d107      	bne.n	800415e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2208      	movs	r2, #8
 8004152:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800415c:	e003      	b.n	8004166 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ffb4 	bl	80040d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	771a      	strb	r2, [r3, #28]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d10b      	bne.n	80041aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d136      	bne.n	800420e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	e031      	b.n	800420e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d10b      	bne.n	80041cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2202      	movs	r2, #2
 80041b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d125      	bne.n	800420e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ca:	e020      	b.n	800420e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10b      	bne.n	80041ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2204      	movs	r2, #4
 80041da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d114      	bne.n	800420e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ec:	e00f      	b.n	800420e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d10a      	bne.n	800420e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2208      	movs	r2, #8
 80041fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7fc fe10 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d103      	bne.n	8004242 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	771a      	strb	r2, [r3, #28]
 8004240:	e019      	b.n	8004276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	429a      	cmp	r2, r3
 800424a:	d103      	bne.n	8004254 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	771a      	strb	r2, [r3, #28]
 8004252:	e010      	b.n	8004276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d103      	bne.n	8004266 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2204      	movs	r2, #4
 8004262:	771a      	strb	r2, [r3, #28]
 8004264:	e007      	b.n	8004276 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d102      	bne.n	8004276 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2208      	movs	r2, #8
 8004274:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff22 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	771a      	strb	r2, [r3, #28]
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <TIM_Base_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00f      	beq.n	80042c4 <TIM_Base_SetConfig+0x38>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d00b      	beq.n	80042c4 <TIM_Base_SetConfig+0x38>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a31      	ldr	r2, [pc, #196]	; (8004374 <TIM_Base_SetConfig+0xe8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_Base_SetConfig+0x38>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a30      	ldr	r2, [pc, #192]	; (8004378 <TIM_Base_SetConfig+0xec>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_Base_SetConfig+0x38>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2f      	ldr	r2, [pc, #188]	; (800437c <TIM_Base_SetConfig+0xf0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d108      	bne.n	80042d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_Base_SetConfig+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01b      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d017      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a22      	ldr	r2, [pc, #136]	; (8004374 <TIM_Base_SetConfig+0xe8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a21      	ldr	r2, [pc, #132]	; (8004378 <TIM_Base_SetConfig+0xec>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a20      	ldr	r2, [pc, #128]	; (800437c <TIM_Base_SetConfig+0xf0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <TIM_Base_SetConfig+0xf4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <TIM_Base_SetConfig+0xf8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0x8a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <TIM_Base_SetConfig+0xfc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <TIM_Base_SetConfig+0xe4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	615a      	str	r2, [r3, #20]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40014000 	.word	0x40014000
 8004384:	40014400 	.word	0x40014400
 8004388:	40014800 	.word	0x40014800

0800438c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 0302 	bic.w	r3, r3, #2
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <TIM_OC1_SetConfig+0xc8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d10c      	bne.n	8004402 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0308 	bic.w	r3, r3, #8
 80043ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 0304 	bic.w	r3, r3, #4
 8004400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <TIM_OC1_SetConfig+0xc8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40010000 	.word	0x40010000

08004458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0210 	bic.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f023 0320 	bic.w	r3, r3, #32
 80044a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <TIM_OC2_SetConfig+0xd4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10d      	bne.n	80044d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <TIM_OC2_SetConfig+0xd4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d113      	bne.n	8004504 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000

08004530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <TIM_OC3_SetConfig+0xd0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <TIM_OC3_SetConfig+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d113      	bne.n	80045da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40010000 	.word	0x40010000

08004604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	031b      	lsls	r3, r3, #12
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <TIM_OC4_SetConfig+0x9c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d109      	bne.n	8004678 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800466a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	019b      	lsls	r3, r3, #6
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000

080046a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 030a 	bic.w	r3, r3, #10
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004702:	b480      	push	{r7}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f023 0210 	bic.w	r2, r3, #16
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800473e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	f043 0307 	orr.w	r3, r3, #7
 8004784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	021a      	lsls	r2, r3, #8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4313      	orrs	r3, r2
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2201      	movs	r2, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	401a      	ands	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e050      	b.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d013      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10c      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000

08004900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004918:	2302      	movs	r3, #2
 800491a:	e03d      	b.n	8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e03f      	b.n	8004a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fe8a 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fc7b 	bl	80052e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b08a      	sub	sp, #40	; 0x28
 8004a42:	af02      	add	r7, sp, #8
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d17c      	bne.n	8004b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_UART_Transmit+0x2c>
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e075      	b.n	8004b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Transmit+0x3e>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e06e      	b.n	8004b5a <HAL_UART_Transmit+0x11c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2221      	movs	r2, #33	; 0x21
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fc ff57 	bl	8001944 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d108      	bne.n	8004ac0 <HAL_UART_Transmit+0x82>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e003      	b.n	8004ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ad0:	e02a      	b.n	8004b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fa3d 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e036      	b.n	8004b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3302      	adds	r3, #2
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e007      	b.n	8004b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	3301      	adds	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1cf      	bne.n	8004ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2140      	movs	r1, #64	; 0x40
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa0d 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e006      	b.n	8004b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d11d      	bne.n	8004bb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_UART_Receive_IT+0x26>
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e016      	b.n	8004bba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Receive_IT+0x38>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e00f      	b.n	8004bba <HAL_UART_Receive_IT+0x58>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fa1e 	bl	8004ff0 <UART_Start_Receive_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	e000      	b.n	8004bba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fad1 	bl	80051b6 <UART_Receive_IT>
      return;
 8004c14:	e17c      	b.n	8004f10 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80b1 	beq.w	8004d80 <HAL_UART_IRQHandler+0x1bc>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_UART_IRQHandler+0x70>
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a6 	beq.w	8004d80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00f      	beq.n	8004cbe <HAL_UART_IRQHandler+0xfa>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_UART_IRQHandler+0xee>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 811f 	beq.w	8004f06 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x11e>
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa6a 	bl	80051b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <HAL_UART_IRQHandler+0x146>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d031      	beq.n	8004d6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9aa 	bl	8005064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d123      	bne.n	8004d66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d013      	beq.n	8004d5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	4a77      	ldr	r2, [pc, #476]	; (8004f18 <HAL_UART_IRQHandler+0x354>)
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fca8 	bl	8002698 <HAL_DMA_Abort_IT>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	e00e      	b.n	8004d7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8e6 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	e00a      	b.n	8004d7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8e2 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	e006      	b.n	8004d7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8de 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d7a:	e0c4      	b.n	8004f06 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	bf00      	nop
    return;
 8004d7e:	e0c2      	b.n	8004f06 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f040 80a2 	bne.w	8004ece <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 809c 	beq.w	8004ece <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8096 	beq.w	8004ece <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d14f      	bne.n	8004e66 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004dd0:	8a3b      	ldrh	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8099 	beq.w	8004f0a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ddc:	8a3a      	ldrh	r2, [r7, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f080 8093 	bcs.w	8004f0a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8a3a      	ldrh	r2, [r7, #16]
 8004de8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df4:	d02b      	beq.n	8004e4e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e04:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e24:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0210 	bic.w	r2, r2, #16
 8004e42:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fd fbb5 	bl	80025b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f870 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e64:	e051      	b.n	8004f0a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d047      	beq.n	8004f0e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004e7e:	8a7b      	ldrh	r3, [r7, #18]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d044      	beq.n	8004f0e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e92:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0210 	bic.w	r2, r2, #16
 8004ec0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f83c 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ecc:	e01f      	b.n	8004f0e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_UART_IRQHandler+0x326>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8ff 	bl	80050e6 <UART_Transmit_IT>
    return;
 8004ee8:	e012      	b.n	8004f10 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_UART_IRQHandler+0x34c>
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f941 	bl	8005186 <UART_EndTransmit_IT>
    return;
 8004f04:	e004      	b.n	8004f10 <HAL_UART_IRQHandler+0x34c>
    return;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f0e:	bf00      	nop
  }
}
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	080050bf 	.word	0x080050bf

08004f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e02c      	b.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d028      	beq.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f7c:	f7fc fce2 	bl	8001944 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d21d      	bcs.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e00f      	b.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d0c3      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2222      	movs	r2, #34	; 0x22
 800501a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005034:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0220 	orr.w	r2, r2, #32
 8005054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800507a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0210 	bic.w	r2, r2, #16
 80050a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff29 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b21      	cmp	r3, #33	; 0x21
 80050f8:	d13e      	bne.n	8005178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	d114      	bne.n	800512e <UART_Transmit_IT+0x48>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d110      	bne.n	800512e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	621a      	str	r2, [r3, #32]
 800512c:	e008      	b.n	8005140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6211      	str	r1, [r2, #32]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff feb8 	bl	8004f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b22      	cmp	r3, #34	; 0x22
 80051c8:	f040 8087 	bne.w	80052da <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d117      	bne.n	8005206 <UART_Receive_IT+0x50>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d113      	bne.n	8005206 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
 8005204:	e026      	b.n	8005254 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d007      	beq.n	800522a <UART_Receive_IT+0x74>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <UART_Receive_IT+0x82>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e008      	b.n	800524a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005264:	2b00      	cmp	r3, #0
 8005266:	d136      	bne.n	80052d6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0220 	bic.w	r2, r2, #32
 8005276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10e      	bne.n	80052c6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0210 	bic.w	r2, r2, #16
 80052b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fe40 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
 80052c4:	e002      	b.n	80052cc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fb fdc8 	bl	8000e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e002      	b.n	80052dc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e8:	b09f      	sub	sp, #124	; 0x7c
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	68d9      	ldr	r1, [r3, #12]
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	ea40 0301 	orr.w	r3, r0, r1
 8005304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	431a      	orrs	r2, r3
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005328:	f021 010c 	bic.w	r1, r1, #12
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005332:	430b      	orrs	r3, r1
 8005334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	6999      	ldr	r1, [r3, #24]
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	ea40 0301 	orr.w	r3, r0, r1
 800534c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4bc5      	ldr	r3, [pc, #788]	; (8005668 <UART_SetConfig+0x384>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d004      	beq.n	8005362 <UART_SetConfig+0x7e>
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4bc3      	ldr	r3, [pc, #780]	; (800566c <UART_SetConfig+0x388>)
 800535e:	429a      	cmp	r2, r3
 8005360:	d103      	bne.n	800536a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005362:	f7fe fa09 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8005366:	6778      	str	r0, [r7, #116]	; 0x74
 8005368:	e002      	b.n	8005370 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800536a:	f7fe f9f1 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 800536e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005378:	f040 80b6 	bne.w	80054e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800537c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537e:	461c      	mov	r4, r3
 8005380:	f04f 0500 	mov.w	r5, #0
 8005384:	4622      	mov	r2, r4
 8005386:	462b      	mov	r3, r5
 8005388:	1891      	adds	r1, r2, r2
 800538a:	6439      	str	r1, [r7, #64]	; 0x40
 800538c:	415b      	adcs	r3, r3
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
 8005390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005394:	1912      	adds	r2, r2, r4
 8005396:	eb45 0303 	adc.w	r3, r5, r3
 800539a:	f04f 0000 	mov.w	r0, #0
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	00d9      	lsls	r1, r3, #3
 80053a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053a8:	00d0      	lsls	r0, r2, #3
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	1911      	adds	r1, r2, r4
 80053b0:	6639      	str	r1, [r7, #96]	; 0x60
 80053b2:	416b      	adcs	r3, r5
 80053b4:	667b      	str	r3, [r7, #100]	; 0x64
 80053b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053c4:	415b      	adcs	r3, r3
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053d0:	f7fa ff02 	bl	80001d8 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4ba5      	ldr	r3, [pc, #660]	; (8005670 <UART_SetConfig+0x38c>)
 80053da:	fba3 2302 	umull	r2, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	011e      	lsls	r6, r3, #4
 80053e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e4:	461c      	mov	r4, r3
 80053e6:	f04f 0500 	mov.w	r5, #0
 80053ea:	4622      	mov	r2, r4
 80053ec:	462b      	mov	r3, r5
 80053ee:	1891      	adds	r1, r2, r2
 80053f0:	6339      	str	r1, [r7, #48]	; 0x30
 80053f2:	415b      	adcs	r3, r3
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053fa:	1912      	adds	r2, r2, r4
 80053fc:	eb45 0303 	adc.w	r3, r5, r3
 8005400:	f04f 0000 	mov.w	r0, #0
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	00d9      	lsls	r1, r3, #3
 800540a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800540e:	00d0      	lsls	r0, r2, #3
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	1911      	adds	r1, r2, r4
 8005416:	65b9      	str	r1, [r7, #88]	; 0x58
 8005418:	416b      	adcs	r3, r5
 800541a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	1891      	adds	r1, r2, r2
 8005428:	62b9      	str	r1, [r7, #40]	; 0x28
 800542a:	415b      	adcs	r3, r3
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005432:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005436:	f7fa fecf 	bl	80001d8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b8c      	ldr	r3, [pc, #560]	; (8005670 <UART_SetConfig+0x38c>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	; 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	3332      	adds	r3, #50	; 0x32
 8005452:	4a87      	ldr	r2, [pc, #540]	; (8005670 <UART_SetConfig+0x38c>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005460:	441e      	add	r6, r3
 8005462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005464:	4618      	mov	r0, r3
 8005466:	f04f 0100 	mov.w	r1, #0
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	1894      	adds	r4, r2, r2
 8005470:	623c      	str	r4, [r7, #32]
 8005472:	415b      	adcs	r3, r3
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800547a:	1812      	adds	r2, r2, r0
 800547c:	eb41 0303 	adc.w	r3, r1, r3
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	f04f 0500 	mov.w	r5, #0
 8005488:	00dd      	lsls	r5, r3, #3
 800548a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800548e:	00d4      	lsls	r4, r2, #3
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	1814      	adds	r4, r2, r0
 8005496:	653c      	str	r4, [r7, #80]	; 0x50
 8005498:	414b      	adcs	r3, r1
 800549a:	657b      	str	r3, [r7, #84]	; 0x54
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	1891      	adds	r1, r2, r2
 80054a8:	61b9      	str	r1, [r7, #24]
 80054aa:	415b      	adcs	r3, r3
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054b6:	f7fa fe8f 	bl	80001d8 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4b6c      	ldr	r3, [pc, #432]	; (8005670 <UART_SetConfig+0x38c>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	; 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	3332      	adds	r3, #50	; 0x32
 80054d2:	4a67      	ldr	r2, [pc, #412]	; (8005670 <UART_SetConfig+0x38c>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 0207 	and.w	r2, r3, #7
 80054de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4432      	add	r2, r6
 80054e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e6:	e0b9      	b.n	800565c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ea:	461c      	mov	r4, r3
 80054ec:	f04f 0500 	mov.w	r5, #0
 80054f0:	4622      	mov	r2, r4
 80054f2:	462b      	mov	r3, r5
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	6139      	str	r1, [r7, #16]
 80054f8:	415b      	adcs	r3, r3
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005500:	1912      	adds	r2, r2, r4
 8005502:	eb45 0303 	adc.w	r3, r5, r3
 8005506:	f04f 0000 	mov.w	r0, #0
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	00d9      	lsls	r1, r3, #3
 8005510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005514:	00d0      	lsls	r0, r2, #3
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	eb12 0804 	adds.w	r8, r2, r4
 800551e:	eb43 0905 	adc.w	r9, r3, r5
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	008b      	lsls	r3, r1, #2
 8005536:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800553a:	0082      	lsls	r2, r0, #2
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fa fe4a 	bl	80001d8 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4b49      	ldr	r3, [pc, #292]	; (8005670 <UART_SetConfig+0x38c>)
 800554a:	fba3 2302 	umull	r2, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	011e      	lsls	r6, r3, #4
 8005552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005554:	4618      	mov	r0, r3
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	1894      	adds	r4, r2, r2
 8005560:	60bc      	str	r4, [r7, #8]
 8005562:	415b      	adcs	r3, r3
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800556a:	1812      	adds	r2, r2, r0
 800556c:	eb41 0303 	adc.w	r3, r1, r3
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	f04f 0500 	mov.w	r5, #0
 8005578:	00dd      	lsls	r5, r3, #3
 800557a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800557e:	00d4      	lsls	r4, r2, #3
 8005580:	4622      	mov	r2, r4
 8005582:	462b      	mov	r3, r5
 8005584:	1814      	adds	r4, r2, r0
 8005586:	64bc      	str	r4, [r7, #72]	; 0x48
 8005588:	414b      	adcs	r3, r1
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	008b      	lsls	r3, r1, #2
 80055a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055a4:	0082      	lsls	r2, r0, #2
 80055a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055aa:	f7fa fe15 	bl	80001d8 <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <UART_SetConfig+0x38c>)
 80055b4:	fba3 1302 	umull	r1, r3, r3, r2
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	2164      	movs	r1, #100	; 0x64
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	3332      	adds	r3, #50	; 0x32
 80055c6:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <UART_SetConfig+0x38c>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d2:	441e      	add	r6, r3
 80055d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d6:	4618      	mov	r0, r3
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	1894      	adds	r4, r2, r2
 80055e2:	603c      	str	r4, [r7, #0]
 80055e4:	415b      	adcs	r3, r3
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ec:	1812      	adds	r2, r2, r0
 80055ee:	eb41 0303 	adc.w	r3, r1, r3
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	f04f 0500 	mov.w	r5, #0
 80055fa:	00dd      	lsls	r5, r3, #3
 80055fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005600:	00d4      	lsls	r4, r2, #3
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	eb12 0a00 	adds.w	sl, r2, r0
 800560a:	eb43 0b01 	adc.w	fp, r3, r1
 800560e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4618      	mov	r0, r3
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	008b      	lsls	r3, r1, #2
 8005622:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005626:	0082      	lsls	r2, r0, #2
 8005628:	4650      	mov	r0, sl
 800562a:	4659      	mov	r1, fp
 800562c:	f7fa fdd4 	bl	80001d8 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <UART_SetConfig+0x38c>)
 8005636:	fba3 1302 	umull	r1, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2164      	movs	r1, #100	; 0x64
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	3332      	adds	r3, #50	; 0x32
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <UART_SetConfig+0x38c>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	f003 020f 	and.w	r2, r3, #15
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4432      	add	r2, r6
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	377c      	adds	r7, #124	; 0x7c
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	40011000 	.word	0x40011000
 800566c:	40011400 	.word	0x40011400
 8005670:	51eb851f 	.word	0x51eb851f

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	; (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	; (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	; (80056b8 <__libc_init_array+0x44>)
 8005688:	f000 f82e 	bl	80056e8 <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08008f90 	.word	0x08008f90
 80056b0:	08008f90 	.word	0x08008f90
 80056b4:	08008f90 	.word	0x08008f90
 80056b8:	08008f94 	.word	0x08008f94

080056bc <memcpy>:
 80056bc:	440a      	add	r2, r1
 80056be:	4291      	cmp	r1, r2
 80056c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c4:	d100      	bne.n	80056c8 <memcpy+0xc>
 80056c6:	4770      	bx	lr
 80056c8:	b510      	push	{r4, lr}
 80056ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d2:	4291      	cmp	r1, r2
 80056d4:	d1f9      	bne.n	80056ca <memcpy+0xe>
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
